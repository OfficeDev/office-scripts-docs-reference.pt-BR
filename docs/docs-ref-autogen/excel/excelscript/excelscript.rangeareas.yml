### YamlMime:UniversalReference
items:
  - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
    summary: 'RangeAreas representa uma coleção de um ou mais intervalos retangulares na mesma planilha. Para saber como usar intervalos do discontinguous, leia [trabalhar com vários intervalos simultaneamente em suplementos do Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-multiple-ranges)<!-- -->.'
    name: ExcelScript.RangeAreas
    fullName: ExcelScript.RangeAreas
    langs:
      - typeScript
    type: interface
    package: ExcelScript!
    children:
      - 'ExcelScript!ExcelScript.RangeAreas#addConditionalFormat:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#calculate:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#clear:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#clearAllConditionalFormats:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#convertDataTypeToText:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#convertToLinkedDataType:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#copyFrom:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getAddress:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getAddressLocal:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getAreaCount:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getAreas:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getCellCount:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormat:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormats:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getDataValidation:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getEntireColumn:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getEntireRow:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getFormat:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getIntersection:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getIsEntireColumn:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getIsEntireRow:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getOffsetRangeAreas:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getPredefinedCellStyle:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getSpecialCells:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getUsedRangeAreas:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getWorksheet:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#setDirty:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#setPredefinedCellStyle:member(1)'
  - uid: 'ExcelScript!ExcelScript.RangeAreas#addConditionalFormat:member(1)'
    summary: Adiciona um novo formato condicional à coleção na prioridade First/Top.
    name: addConditionalFormat(type)
    fullName: addConditionalFormat(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        description: ''
      parameters:
        - id: type
          description: O tipo de formato condicional que está sendo adicionado. Consulte Excel. Valorconditionalformattype para obter detalhes.
          type:
            - 'ExcelScript!ExcelScript.ConditionalFormatType:enum'
  - uid: 'ExcelScript!ExcelScript.RangeAreas#calculate:member(1)'
    summary: Calcula todas as células no RangeAreas.
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#clear:member(1)'
    summary: 'Limpa valores, formato, preenchimento, borda, etc. em cada uma das áreas que compõe este objeto RangeAreas.'
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: ClearApplyTo): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyTo
          description: Opcional. Determina o tipo de ação clara. Consulte Excel. ClearApplyTo para obter detalhes. O padrão é "All".
          type:
            - 'ExcelScript!ExcelScript.ClearApplyTo:enum'
  - uid: 'ExcelScript!ExcelScript.RangeAreas#clearAllConditionalFormats:member(1)'
    summary: Limpa todos os formatos condicionais ativos no intervalo atual especificado.
    name: clearAllConditionalFormats()
    fullName: clearAllConditionalFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAllConditionalFormats(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#convertDataTypeToText:member(1)'
    summary: Converte todas as células de RangeAreas com tipos de dados em texto.
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#convertToLinkedDataType:member(1)'
    summary: Converte todas as células de RangeAreas em tipos de dados vinculados.
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        convertToLinkedDataType(
                    serviceID: number,
                    languageCulture: string
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: A ID de serviço que será usada para consultar os dados.
          type:
            - number
        - id: languageCulture
          description: Cultura de idioma para consultar o serviço.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.RangeAreas#copyFrom:member(1)'
    summary: Copia a formatação ou dados da célula do intervalo de origem ou de RangeAreas para o RangeAreas atual. O rangeAreas de destino pode ter um tamanho diferente do intervalo de origem ou RangeAreas. O destino será expandido automaticamente se for menor do que a origem.
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?: RangeCopyType,
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: 'O intervalo de origem ou RangeAreas a ser copiado. Quando o RangeAreas de origem tem vários intervalos, seu formulário deve ser criado removendo linhas ou colunas completas de um intervalo retangular.'
          type:
            - 'ExcelScript!ExcelScript.RangeAreas#copyFrom~0:complex'
        - id: copyType
          description: O tipo de dados da célula ou formatação a ser copiada. O padrão é "All".
          type:
            - 'ExcelScript!ExcelScript.RangeCopyType:enum'
        - id: skipBlanks
          description: True se para ignorar células em branco no intervalo de origem ou RangeAreas. O padrão é false.
          type:
            - boolean
        - id: transpose
          description: True se para transpor as células no RangeAreas de destino. O padrão é false.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getAddress:member(1)'
    summary: 'Retorna a referência RangeAreas em estilo a1. O valor de endereço conterá o nome da planilha para cada bloco retangular de células (por exemplo, "Planilha1! A1: B4, Planilha1! D1: D4 ").'
    name: getAddress()
    fullName: getAddress()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAddress(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getAddressLocal:member(1)'
    summary: Retorna a referência RangeAreas na localidade do usuário.
    name: getAddressLocal()
    fullName: getAddressLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAddressLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getAreaCount:member(1)'
    summary: Retorna o número de intervalos retangulares que compõem este objeto RangeAreas.
    name: getAreaCount()
    fullName: getAreaCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAreaCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getAreas:member(1)'
    summary: Retorna uma coleção de intervalos retangulares que compõem este objeto RangeAreas.
    name: getAreas()
    fullName: getAreas()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAreas(): Range[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas#getAreas~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getCellCount:member(1)'
    summary: Retorna o número de células no objeto RangeAreas somando as contagens de células de todos os intervalos retangulares individuais. Retornará -1 se a contagem de células exceder 2^31-1 (2.147.483.647).
    name: getCellCount()
    fullName: getCellCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormat:member(1)'
    summary: Retorna um formato condicional para o ID fornecido.
    name: getConditionalFormat(id)
    fullName: getConditionalFormat(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getConditionalFormat(id: string): ConditionalFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        description: ''
      parameters:
        - id: id
          description: A ID da formatação condicional.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormats:member(1)'
    summary: Retorna uma coleção de ConditionalFormats que se cruza com qualquer célula nesse objeto RangeAreas.
    name: getConditionalFormats()
    fullName: getConditionalFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getConditionalFormats(): ConditionalFormat[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormats~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getDataValidation:member(1)'
    summary: Retorna um objeto dataValidation para todos os intervalos no RangeAreas.
    name: getDataValidation()
    fullName: getDataValidation()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataValidation(): DataValidation;'
      return:
        type:
          - 'ExcelScript!ExcelScript.DataValidation:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getEntireColumn:member(1)'
    summary: 'Retorna um objeto RangeAreas que representa as colunas inteiras dos objetos RangeAreas (por exemplo, se o RangeAreas atual representa as células "B4:E11, H2", ele retorna um RangeAreas que representa as colunas "B:E, H:H").'
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getEntireRow:member(1)'
    summary: 'Retorna um objeto RangeAreas que representa as linhas inteiras dos objetos RangeAreas (por exemplo, se o RangeAreas atual representa as células "B4:E11", ele retorna um RangeAreas que representa as linhas "4:11").'
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getFormat:member(1)'
    summary: 'Retorna um objeto RangeFormat, encapsulando a fonte, o preenchimento, as bordas, o alinhamento e outras propriedades para todos os intervalos no objeto RangeAreas.'
    name: getFormat()
    fullName: getFormat()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormat(): RangeFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeFormat:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getIntersection:member(1)'
    summary: 'Retorna o objeto RangeAreas que representa a interseção dos intervalos fornecidos ou RangeAreas. Se nenhuma interseção for encontrada, um objeto null será retornado.'
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | RangeAreas | string): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: 'O intervalo, RangeAreas ou endereço que será usado para determinar a interseção.'
          type:
            - 'ExcelScript!ExcelScript.RangeAreas#getIntersection~0:complex'
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getIsEntireColumn:member(1)'
    summary: 'Especifica se todos os intervalos deste objeto RangeAreas representam colunas inteiras (por exemplo, "A:C, Q:Z").'
    name: getIsEntireColumn()
    fullName: getIsEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsEntireColumn(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getIsEntireRow:member(1)'
    summary: 'Especifica se todos os intervalos deste objeto RangeAreas representam linhas inteiras (por exemplo, "1:3, 5:7").'
    name: getIsEntireRow()
    fullName: getIsEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsEntireRow(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getOffsetRangeAreas:member(1)'
    summary: 'Retorna um objeto RangeAreas que é deslocado pelo deslocamento de linha e coluna específico. A dimensão do RangeAreas retornado corresponderá ao objeto original. Se o RangeAreas resultante for imposto para fora dos limites da grade da planilha, o sistema gerará um erro.'
    name: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    fullName: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getOffsetRangeAreas(
                    rowOffset: number,
                    columnOffset: number
                ): RangeAreas;
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: rowOffset
          description: 'O número de linhas (positivo, negativo ou 0) pelo qual o RangeAreas deve ser deslocado. Valores positivos estão deslocados para baixo, e os valores negativos para cima.'
          type:
            - number
        - id: columnOffset
          description: 'O número de colunas (positivo, negativo ou 0) pelo qual o RangeAreas deve ser deslocado. Valores positivos estão deslocados para a direita, e os valores negativos para a esquerda.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getPredefinedCellStyle:member(1)'
    summary: 'Representa o estilo de todos os intervalos nesse objeto RangeAreas. Se os estilos das células forem inconsistentes, NULL será retornado. Para estilos personalizados, o nome do estilo será retornado. Para os estilos internos, uma cadeia de caracteres que representa um valor na enumeração BuiltInstyle será retornada.'
    name: getPredefinedCellStyle()
    fullName: getPredefinedCellStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPredefinedCellStyle(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getSpecialCells:member(1)'
    summary: Retorna um objeto RangeAreas que representa todas as células que correspondem ao tipo e valor especificados. Retorna um objeto null se nenhuma célula especial que corresponda ao critério for encontrada.
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCells(
                    cellType: SpecialCellType,
                    cellValueType?: SpecialCellValueType
                ): RangeAreas;
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: O tipo de células a serem incluídas.
          type:
            - 'ExcelScript!ExcelScript.SpecialCellType:enum'
        - id: cellValueType
          description: 'Se CellType for Constants ou formulas, esse argumento será usado para determinar quais tipos de células incluir no resultado. Esses valores podem ser combinados em conjunto para retornar mais de um tipo. O padrão é selecionar todas as constantes ou as fórmulas, independente do tipo.'
          type:
            - 'ExcelScript!ExcelScript.SpecialCellValueType:enum'
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getUsedRangeAreas:member(1)'
    summary: 'Retorna o RangeAreas usado que compreende todas as áreas utilizadas de intervalos retangulares individuais no objeto RangeAreas. Se não houver células usadas no RangeAreas, um objeto NULL será retornado.'
    name: getUsedRangeAreas(valuesOnly)
    fullName: getUsedRangeAreas(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeAreas(valuesOnly?: boolean): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: Se deve apenas considerar as células com valores como células usadas.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getWorksheet:member(1)'
    summary: Retorna a planilha para o RangeAreas atual.
    name: getWorksheet()
    fullName: getWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWorksheet(): Worksheet;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#setDirty:member(1)'
    summary: Define o RangeAreas que será recalculado quando o próximo recálculo ocorrer.
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#setPredefinedCellStyle:member(1)'
    summary: 'Representa o estilo de todos os intervalos nesse objeto RangeAreas. Se os estilos das células forem inconsistentes, NULL será retornado. Para estilos personalizados, o nome do estilo será retornado. Para os estilos internos, uma cadeia de caracteres que representa um valor na enumeração BuiltInstyle será retornada.'
    name: setPredefinedCellStyle(predefinedCellStyle)
    fullName: setPredefinedCellStyle(predefinedCellStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: predefinedCellStyle
          description: ''
          type:
            - string
references:
  - uid: 'ExcelScript!ExcelScript.ConditionalFormat:interface'
    name: ConditionalFormat
    fullName: ExcelScript.ConditionalFormat
  - uid: 'ExcelScript!ExcelScript.ConditionalFormatType:enum'
    name: ConditionalFormatType
    fullName: ExcelScript.ConditionalFormatType
  - uid: 'ExcelScript!ExcelScript.ClearApplyTo:enum'
    name: ClearApplyTo
    fullName: ExcelScript.ClearApplyTo
  - uid: 'ExcelScript!ExcelScript.RangeAreas#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: ExcelScript.Range | ExcelScript.RangeAreas | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
        name: RangeAreas
        fullName: ExcelScript.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.RangeCopyType:enum'
    name: RangeCopyType
    fullName: ExcelScript.RangeCopyType
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getAreas~0:complex'
    name: 'Range[]'
    fullName: 'ExcelScript.Range[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormats~0:complex'
    name: 'ConditionalFormat[]'
    fullName: 'ExcelScript.ConditionalFormat[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        name: ConditionalFormat
        fullName: ExcelScript.ConditionalFormat
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.DataValidation:interface'
    name: DataValidation
    fullName: ExcelScript.DataValidation
  - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
    name: RangeAreas
    fullName: ExcelScript.RangeAreas
  - uid: 'ExcelScript!ExcelScript.RangeFormat:interface'
    name: RangeFormat
    fullName: ExcelScript.RangeFormat
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getIntersection~0:complex'
    name: Range | RangeAreas | string
    fullName: ExcelScript.Range | ExcelScript.RangeAreas | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
        name: RangeAreas
        fullName: ExcelScript.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.SpecialCellType:enum'
    name: SpecialCellType
    fullName: ExcelScript.SpecialCellType
  - uid: 'ExcelScript!ExcelScript.SpecialCellValueType:enum'
    name: SpecialCellValueType
    fullName: ExcelScript.SpecialCellValueType
  - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
    name: Worksheet
    fullName: ExcelScript.Worksheet