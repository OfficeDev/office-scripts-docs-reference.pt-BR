### YamlMime:TSType
name: ExcelScript.Workbook
uid: ExcelScript!ExcelScript.Workbook:interface
package: ExcelScript!
fullName: ExcelScript.Workbook
summary: A pasta de trabalho é o objeto de nível superior que contém objetos de pasta de trabalho relacionados, como planilhas, tabelas e intervalos.
remarks: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```TypeScript\n/**\n * This script adds a new worksheet to the workbook, then switches to it.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Add a new worksheet with the default name.\n  let worksheet = workbook.addWorksheet();\n\n  // Switch focus to the new worksheet.\n  worksheet.activate();\n}\n```"
isPreview: false
isDeprecated: false
type: interface
methods:
- name: addBinding(range, bindingType, id)
  uid: ExcelScript!ExcelScript.Workbook#addBinding:member(1)
  package: ExcelScript!
  fullName: addBinding(range, bindingType, id)
  summary: Adiciona uma nova associação a um intervalo específico.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addBinding(
                  range: Range | string,
                  bindingType: BindingType,
                  id: string
              ): Binding;
    parameters:
    - id: range
      description: Intervalo para vincular a associação. Pode ser um objeto `Range` ou uma cadeia de caracteres. Se for uma cadeia de caracteres, deve conter o endereço completo, incluindo o nome da planilha
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: bindingType
      description: Tipo de associação. Ver `ExcelScript.BindingType`<!-- -->.
      type: <xref uid="ExcelScript!ExcelScript.BindingType:enum" />
    - id: id
      description: Nome da associação.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />
      description: ''
- name: addBindingFromNamedItem(name, bindingType, id)
  uid: ExcelScript!ExcelScript.Workbook#addBindingFromNamedItem:member(1)
  package: ExcelScript!
  fullName: addBindingFromNamedItem(name, bindingType, id)
  summary: Adiciona uma nova associação com base em um item nomeado na pasta de trabalho. Se o item nomeado referenciar várias áreas, o `InvalidReference` erro será retornado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addBindingFromNamedItem(
                  name: string,
                  bindingType: BindingType,
                  id: string
              ): Binding;
    parameters:
    - id: name
      description: Nome do qual deseja criar a associação.
      type: string
    - id: bindingType
      description: Tipo de associação. Ver `ExcelScript.BindingType`<!-- -->.
      type: <xref uid="ExcelScript!ExcelScript.BindingType:enum" />
    - id: id
      description: Nome da associação.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />
      description: ''
- name: addBindingFromSelection(bindingType, id)
  uid: ExcelScript!ExcelScript.Workbook#addBindingFromSelection:member(1)
  package: ExcelScript!
  fullName: addBindingFromSelection(bindingType, id)
  summary: Adiciona uma nova associação com base na seleção atual. Se a seleção tiver várias áreas, o `InvalidReference` erro será retornado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addBindingFromSelection(bindingType: BindingType, id: string): Binding;'
    parameters:
    - id: bindingType
      description: Tipo de associação. Ver `ExcelScript.BindingType`<!-- -->.
      type: <xref uid="ExcelScript!ExcelScript.BindingType:enum" />
    - id: id
      description: Nome da associação.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />
      description: ''
- name: addComment(cellAddress, content, contentType)
  uid: ExcelScript!ExcelScript.Workbook#addComment:member(1)
  package: ExcelScript!
  fullName: addComment(cellAddress, content, contentType)
  summary: Cria um novo comentário com o conteúdo fornecido na célula especificada. Um `InvalidArgument` erro será gerado se o intervalo fornecido for maior que uma célula.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addComment(
                  cellAddress: Range | string,
                  content: CommentRichContent | string,
                  contentType?: ContentType
              ): Comment;
    parameters:
    - id: cellAddress
      description: A célula à qual o comentário é adicionado. Pode ser um objeto ou `Range` uma cadeia de caracteres. Se for uma cadeia de caracteres, ela deverá conter o endereço completo, incluindo o nome da planilha. Um `InvalidArgument` erro será gerado se o intervalo fornecido for maior que uma célula.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: content
      description: O conteúdo do comentário. Pode ser uma cadeia de caracteres ou um `CommentRichContent` objeto. Cadeias de caracteres são usadas para texto sem formatação. `CommentRichContent` objects allow for other comment features, such as mentions.
      type: <xref uid="ExcelScript!ExcelScript.CommentRichContent:interface" /> | string
    - id: contentType
      description: Opcional. O tipo de conteúdo contido no comentário. O valor padrão é enumeração `ContentType.Plain`<!-- -->.
      type: <xref uid="ExcelScript!ExcelScript.ContentType:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: addCustomXmlPart(xml)
  uid: ExcelScript!ExcelScript.Workbook#addCustomXmlPart:member(1)
  package: ExcelScript!
  fullName: addCustomXmlPart(xml)
  summary: Adiciona uma nova parte XML personalizada à pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addCustomXmlPart(xml: string): CustomXmlPart;'
    parameters:
    - id: xml
      description: Conteúdo XML. Deve ser um fragmento XML válido.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />
      description: ''
- name: addNamedItem(name, reference, comment)
  uid: ExcelScript!ExcelScript.Workbook#addNamedItem:member(1)
  package: ExcelScript!
  fullName: addNamedItem(name, reference, comment)
  summary: Adiciona um novo nome à coleção do escopo fornecido.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addNamedItem(
                  name: string,
                  reference: Range | string,
                  comment?: string
              ): NamedItem;
    parameters:
    - id: name
      description: O nome do item nomeado.
      type: string
    - id: reference
      description: A fórmula ou o intervalo ao qual o nome fará referência.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: comment
      description: Opcional. O comentário associado ao item nomeado.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```TypeScript\n/**\n * This script creates a named formula and uses it in another part of the workbook.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Create a named item for a formula.\n  // This formula is the sum of the cells F2:F21 on Sheet1.\n  const namedItem: ExcelScript.NamedItem = workbook.addNamedItem(\n    \"GrandTotal\", \n    \"=SUM(Sheet1!$F$2:$F$21)\", \n    \"The sum of table sums.\"\n  );\n\n  // Add this named formula to a new sheet in the workbook.\n  const otherSheet = workbook.addWorksheet();\n  otherSheet.getRange(\"A1\").setFormula(namedItem.getFormula());\n\n  // Switch to the new worksheet.\n  otherSheet.activate();\n}\n```"
- name: addNamedItemFormulaLocal(name, formula, comment)
  uid: ExcelScript!ExcelScript.Workbook#addNamedItemFormulaLocal:member(1)
  package: ExcelScript!
  fullName: addNamedItemFormulaLocal(name, formula, comment)
  summary: Adiciona um novo nome à coleção de escopo fornecido usando a localidade do usuário para a fórmula.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addNamedItemFormulaLocal(
                  name: string,
                  formula: string,
                  comment?: string
              ): NamedItem;
    parameters:
    - id: name
      description: O nome do item nomeado.
      type: string
    - id: formula
      description: A fórmula na localidade do usuário à qual o nome se referirá.
      type: string
    - id: comment
      description: Opcional. O comentário associado ao item nomeado.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" />
      description: ''
- name: addPivotTable(name, source, destination)
  uid: ExcelScript!ExcelScript.Workbook#addPivotTable:member(1)
  package: ExcelScript!
  fullName: addPivotTable(name, source, destination)
  summary: Adicione uma Tabela Dinâmica com base nos dados de origem especificados e insira-a na célula superior esquerda do intervalo de destino.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addPivotTable(
                  name: string,
                  source: Range | string | Table,
                  destination: Range | string
              ): PivotTable;
    parameters:
    - id: name
      description: O nome da nova Tabela Dinâmica.
      type: string
    - id: source
      description: Os dados de origem da nova Tabela Dinâmica podem ser um intervalo (ou endereço de cadeia de caracteres, incluindo o nome da planilha) ou uma tabela.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string | <xref uid="ExcelScript!ExcelScript.Table:interface" />
    - id: destination
      description: A célula no canto superior esquerdo do intervalo de destino do relatório de tabela dinâmica (o intervalo na planilha em que o relatório resultante será inserido).
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```TypeScript\n/**\n * This script creates a PivotTable from an existing table and adds it to an existing worksheet.\n * This script assumes there is a table in the current worksheet with columns named \"Type\" and \"Sales\".\n * It also assumes there is a worksheet named \"PivotSheet\".\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Create a PivotTable based on a table in the current worksheet.\n  let sheet = workbook.getActiveWorksheet();\n  let table = sheet.getTables()[0];\n  let pivotTable = workbook.addPivotTable(\"My Pivot\", table, \"PivotSheet!A1\");\n\n  // Add fields to the PivotTable to show \"Sales\" per \"Type\".\n  pivotTable.addRowHierarchy(pivotTable.getHierarchy(\"Type\"));\n  pivotTable.addDataHierarchy(pivotTable.getHierarchy(\"Sales\"));\n}\n```"
- name: addPivotTableStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: addPivotTableStyle(name, makeUniqueName)
  summary: Cria um espaço em `PivotTableStyle` branco com o nome especificado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addPivotTableStyle(
                  name: string,
                  makeUniqueName?: boolean
              ): PivotTableStyle;
    parameters:
    - id: name
      description: O nome exclusivo para o novo estilo de Tabela Dinâmica. Gerará um `InvalidArgument` erro se o nome já estiver em uso.
      type: string
    - id: makeUniqueName
      description: Opcional. O padrão é `false`<!-- -->. Se `true`<!-- -->, acrescentará números ao nome para torná-lo exclusivo, se necessário.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" />
      description: ''
- name: addPredefinedCellStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#addPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: addPredefinedCellStyle(name)
  summary: Adiciona um novo estilo para o conjunto.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addPredefinedCellStyle(name: string): void;'
    parameters:
    - id: name
      description: Nome do estilo a ser adicionado.
      type: string
    return:
      type: void
      description: ''
- name: addSlicer(slicerSource, sourceField, slicerDestination)
  uid: ExcelScript!ExcelScript.Workbook#addSlicer:member(1)
  package: ExcelScript!
  fullName: addSlicer(slicerSource, sourceField, slicerDestination)
  summary: Adiciona uma nova segmentação de dados à pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addSlicer(
                  slicerSource: string | PivotTable | Table,
                  sourceField: string | PivotField | number | TableColumn,
                  slicerDestination?: string | Worksheet
              ): Slicer;
    parameters:
    - id: slicerSource
      description: A fonte de dados na qual a nova segmentação será baseada. Pode ser um objeto `PivotTable` , um objeto `Table` ou uma cadeia de caracteres. Quando um objeto de Tabela Dinâmica é passado, a fonte de dados é a origem do `PivotTable` objeto. Quando um `Table` objeto é passado, a fonte de dados é o `Table` objeto. Quando uma cadeia de caracteres é passada, ela é interpretada como o nome ou a ID de uma Tabela Dinâmica ou tabela.
      type: string | <xref uid="ExcelScript!ExcelScript.PivotTable:interface" /> | <xref uid="ExcelScript!ExcelScript.Table:interface" />
    - id: sourceField
      description: O campo na fonte de dados pelo qual filtrar. Pode ser um objeto `PivotField` , um objeto, a `TableColumn` ID de um `PivotField` ou o nome ou a ID de um `TableColumn`<!-- -->.
      type: string | <xref uid="ExcelScript!ExcelScript.PivotField:interface" /> | number | <xref uid="ExcelScript!ExcelScript.TableColumn:interface" />
    - id: slicerDestination
      description: Opcional. A planilha na qual a nova segmentação de dados será criada. Pode ser um objeto `Worksheet` ou o nome ou a ID de uma planilha. Esse parâmetro poderá ser omitido se a coleção de segmentação de dados for recuperada de uma planilha.
      type: string | <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```TypeScript\n/**\n * This script adds a slicer for an existing PivotTable.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the PivotTable named \"Farm Pivot\".\n  const farmPivot = workbook.getPivotTable(\"Farm Pivot\");\n\n  // Create the slicer. \n  // Note that this assumes \"Type\" is already added as a hierarchy to the PivotTable.\n  const fruitSlicer: ExcelScript.Slicer = workbook.addSlicer(\n    farmPivot, /* The table or PivotTale to be sliced. */\n    farmPivot.getHierarchy(\"Type\").getFields()[0] /* What source field to use as the slicer options. */\n  );\n\n  // Select the items to display.\n  fruitSlicer.selectItems([\"Lemon\", \"Lime\"]);\n\n  // Set the left margin of the slicer.\n  fruitSlicer.setLeft(400);\n}\n```"
- name: addSlicerStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addSlicerStyle:member(1)
  package: ExcelScript!
  fullName: addSlicerStyle(name, makeUniqueName)
  summary: Cria um estilo de segmentação em branco com o nome especificado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addSlicerStyle(name: string, makeUniqueName?: boolean): SlicerStyle;'
    parameters:
    - id: name
      description: O nome exclusivo para o novo estilo de segmentação de dados. Gerará uma `InvalidArgument` exceção se o nome já estiver em uso.
      type: string
    - id: makeUniqueName
      description: Opcional. O padrão é `false`<!-- -->. Se `true`<!-- -->, acrescentará números ao nome para torná-lo exclusivo, se necessário.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" />
      description: ''
- name: addTable(address, hasHeaders)
  uid: ExcelScript!ExcelScript.Workbook#addTable:member(1)
  package: ExcelScript!
  fullName: addTable(address, hasHeaders)
  summary: Cria uma nova tabela. O objeto de intervalo ou endereço de origem determina a planilha à qual a tabela será adicionada. Se a tabela não puder ser adicionada (por exemplo, porque o endereço é inválido ou a tabela se sobreporia a outra), será gerado um erro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTable(address: Range | string, hasHeaders: boolean): Table;'
    parameters:
    - id: address
      description: Um `Range` objeto ou um endereço de cadeia de caracteres ou nome do intervalo que representa a fonte de dados. Se o endereço não contiver o nome de uma planilha, a folha ativa no momento será usada.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: hasHeaders
      description: Um valor booliano que indica se os dados que estão sendo importados têm rótulos de coluna. Se a origem não contiver cabeçalhos (ou seja, quando essa propriedade for definida como `false`<!-- -->), o Excel gerará automaticamente um cabeçalho e deslocará os dados para baixo em uma linha.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```TypeScript\n/**\n * This sample converts the information in the first worksheet\n * into a table with headers.\n*/\nfunction main(workbook: ExcelScript.Workbook) {\n  // This assumes there is one contiguous range in the first worksheet.\n  const dataRange = workbook.getFirstWorksheet().getUsedRange();\n  \n  // Add a table at the workbook level.\n  workbook.addTable(dataRange.getAddress(), true);\n}\n```"
- name: addTableStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addTableStyle:member(1)
  package: ExcelScript!
  fullName: addTableStyle(name, makeUniqueName)
  summary: Cria um espaço em `TableStyle` branco com o nome especificado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTableStyle(name: string, makeUniqueName?: boolean): TableStyle;'
    parameters:
    - id: name
      description: O nome exclusivo para o novo estilo de tabela. Gerará um `InvalidArgument` erro se o nome já estiver em uso.
      type: string
    - id: makeUniqueName
      description: Opcional. O padrão é `false`<!-- -->. Se `true`<!-- -->, acrescentará números ao nome para torná-lo exclusivo, se necessário.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" />
      description: ''
- name: addTimelineStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addTimelineStyle:member(1)
  package: ExcelScript!
  fullName: addTimelineStyle(name, makeUniqueName)
  summary: Cria um espaço em `TimelineStyle` branco com o nome especificado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTimelineStyle(name: string, makeUniqueName?: boolean): TimelineStyle;'
    parameters:
    - id: name
      description: O nome exclusivo para o novo estilo de linha do tempo. Gerará um `InvalidArgument` erro se o nome já estiver em uso.
      type: string
    - id: makeUniqueName
      description: Opcional. O padrão é `false`<!-- -->. Se `true`<!-- -->, acrescentará números ao nome para torná-lo exclusivo, se necessário.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" />
      description: ''
- name: addWorksheet(name)
  uid: ExcelScript!ExcelScript.Workbook#addWorksheet:member(1)
  package: ExcelScript!
  fullName: addWorksheet(name)
  summary: Adiciona uma nova planilha à pasta de trabalho. A planilha será adicionada ao final das planilhas existentes. Se você quiser ativar a planilha recém-adicionada, chame-a `.activate()` .
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addWorksheet(name?: string): Worksheet;'
    parameters:
    - id: name
      description: Opcional. O nome da planilha a ser adicionada. Se especificado, o nome deve ser exclusivo. Se não especificado, o Excel determina o nome da nova planilha.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```TypeScript\n/**\n * This script adds a new worksheet named \"Data\" to the workbook.\n * If a worksheet with that name already exists, the script logs a note.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Check if the \"Data\" worksheet already exists.\n  if (workbook.getWorksheet(\"Data\")) {\n    console.log(\"The Data worksheet is already in the workbook.\");\n  } else {\n    // Add a new worksheet.\n    let worksheet = workbook.addWorksheet(\"Data\");\n  }\n}\n```"
- name: breakAllLinksToLinkedWorkbooks()
  uid: ExcelScript!ExcelScript.Workbook#breakAllLinksToLinkedWorkbooks:member(1)
  package: ExcelScript!
  fullName: breakAllLinksToLinkedWorkbooks()
  summary: Interrompe todos os links para as pastas de trabalho vinculadas. Depois que os links são desfeitos, todas as fórmulas que fazem referência a links de pasta de trabalho são totalmente removidas e substituídas por valores recuperados mais recentemente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'breakAllLinksToLinkedWorkbooks(): void;'
    return:
      type: void
      description: ''
- name: getActiveCell()
  uid: ExcelScript!ExcelScript.Workbook#getActiveCell:member(1)
  package: ExcelScript!
  fullName: getActiveCell()
  summary: Obtém a célula ativa no momento da pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveCell(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```TypeScript\n/**\n * This script logs the value of the current active cell. \n * If multiple cells are selected, the top-leftmost cell will be logged.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current active cell in the workbook.\n  let cell = workbook.getActiveCell();\n  console.log(`The current cell's value is ${cell.getValue()}`);\n}\n```"
- name: getActiveChart()
  uid: ExcelScript!ExcelScript.Workbook#getActiveChart:member(1)
  package: ExcelScript!
  fullName: getActiveChart()
  summary: Obtém o gráfico ativo no momento na pasta de trabalho. Se não houver nenhum gráfico ativo, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveChart(): Chart;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Chart:interface" />
      description: ''
- name: getActiveSlicer()
  uid: ExcelScript!ExcelScript.Workbook#getActiveSlicer:member(1)
  package: ExcelScript!
  fullName: getActiveSlicer()
  summary: Obtém a segmentação de dados ativa no momento na pasta de trabalho. Se não houver nenhuma segmentação de dados ativa, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveSlicer(): Slicer;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" />
      description: ''
- name: getActiveWorksheet()
  uid: ExcelScript!ExcelScript.Workbook#getActiveWorksheet:member(1)
  package: ExcelScript!
  fullName: getActiveWorksheet()
  summary: Obtém a planilha ativa no momento na pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveWorksheet(): Worksheet;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getApplication()
  uid: ExcelScript!ExcelScript.Workbook#getApplication:member(1)
  package: ExcelScript!
  fullName: getApplication()
  summary: Representa a instância de aplicativo do Excel que contém esta pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getApplication(): Application;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Application:interface" />
      description: ''
- name: getAutoSave()
  uid: ExcelScript!ExcelScript.Workbook#getAutoSave:member(1)
  package: ExcelScript!
  fullName: getAutoSave()
  summary: Especifica se a pasta de trabalho está no modo salvamento automático.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAutoSave(): boolean;'
    return:
      type: boolean
      description: ''
- name: getBinding(id)
  uid: ExcelScript!ExcelScript.Workbook#getBinding:member(1)
  package: ExcelScript!
  fullName: getBinding(id)
  summary: Obtém um objeto de associação pela ID. Se o objeto de associação não existir, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBinding(id: string): Binding | undefined;'
    parameters:
    - id: id
      description: ID do objeto Binding a recuperar.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" /> | undefined
      description: ''
- name: getBindings()
  uid: ExcelScript!ExcelScript.Workbook#getBindings:member(1)
  package: ExcelScript!
  fullName: getBindings()
  summary: Representa uma coleção de ligações que fazem parte da pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBindings(): Binding[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />[]
      description: ''
- name: getCalculationEngineVersion()
  uid: ExcelScript!ExcelScript.Workbook#getCalculationEngineVersion:member(1)
  package: ExcelScript!
  fullName: getCalculationEngineVersion()
  summary: Retorna um número sobre a versão do Mecanismo de Cálculo do Excel.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCalculationEngineVersion(): number;'
    return:
      type: number
      description: ''
- name: getChartDataPointTrack()
  uid: ExcelScript!ExcelScript.Workbook#getChartDataPointTrack:member(1)
  package: ExcelScript!
  fullName: getChartDataPointTrack()
  summary: True se todos os gráficos na pasta de trabalho estiverem rastreando os pontos de dados reais aos quais eles estão anexados. False se os gráficos rastrearem o índice dos pontos de dados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getChartDataPointTrack(): boolean;'
    return:
      type: boolean
      description: ''
- name: getComment(commentId)
  uid: ExcelScript!ExcelScript.Workbook#getComment:member(1)
  package: ExcelScript!
  fullName: getComment(commentId)
  summary: Obtém um comentário da coleção com base em seu ID.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getComment(commentId: string): Comment;'
    parameters:
    - id: commentId
      description: O identificador do comentário.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: getCommentByCell(cellAddress)
  uid: ExcelScript!ExcelScript.Workbook#getCommentByCell:member(1)
  package: ExcelScript!
  fullName: getCommentByCell(cellAddress)
  summary: Obtém o comentário da célula especificada.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCommentByCell(cellAddress: Range | string): Comment;'
    parameters:
    - id: cellAddress
      description: A célula na qual o comentário está. Pode ser um objeto ou `Range` uma cadeia de caracteres. Se for uma cadeia de caracteres, ela deverá conter o endereço completo, incluindo o nome da planilha. Um `InvalidArgument` erro será gerado se o intervalo fornecido for maior que uma célula.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: getCommentByReplyId(replyId)
  uid: ExcelScript!ExcelScript.Workbook#getCommentByReplyId:member(1)
  package: ExcelScript!
  fullName: getCommentByReplyId(replyId)
  summary: Obtém o comentário ao qual a resposta fornecida está conectada.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCommentByReplyId(replyId: string): Comment;'
    parameters:
    - id: replyId
      description: O identificador da resposta de comentário.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: getComments()
  uid: ExcelScript!ExcelScript.Workbook#getComments:member(1)
  package: ExcelScript!
  fullName: getComments()
  summary: Representa uma coleção de comentários associados à pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getComments(): Comment[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />[]
      description: ''
- name: getCustomXmlPart(id)
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlPart:member(1)
  package: ExcelScript!
  fullName: getCustomXmlPart(id)
  summary: Obtém uma parte XML personalizada com base em sua ID. Se o `CustomXmlPart` não existir, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustomXmlPart(id: string): CustomXmlPart | undefined;'
    parameters:
    - id: id
      description: ID do objeto a ser recuperado.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" /> | undefined
      description: ''
- name: getCustomXmlPartByNamespace(namespaceUri)
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlPartByNamespace:member(1)
  package: ExcelScript!
  fullName: getCustomXmlPartByNamespace(namespaceUri)
  summary: Obtém uma nova coleção de partes XML personalizadas cujos namespaces correspondem ao namespace fornecido.
  remarks: ''
  isPreview: false
  isDeprecated: true
  customDeprecatedMessage: Use `getCustomXmlPartsByNamespace` instead.
  syntax:
    content: 'getCustomXmlPartByNamespace(namespaceUri: string): CustomXmlPart[];'
    parameters:
    - id: namespaceUri
      description: Esse deve ser um URI de esquema totalmente qualificado; por exemplo, "http://schemas.contoso.com/review/1.0".
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />[]
      description: ''
- name: getCustomXmlParts()
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlParts:member(1)
  package: ExcelScript!
  fullName: getCustomXmlParts()
  summary: Representa a coleção de partes XML personalizadas contidas por esta pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustomXmlParts(): CustomXmlPart[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />[]
      description: ''
- name: getCustomXmlPartsByNamespace(namespaceUri)
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlPartsByNamespace:member(1)
  package: ExcelScript!
  fullName: getCustomXmlPartsByNamespace(namespaceUri)
  summary: Obtém uma nova coleção de partes XML personalizadas cujos namespaces correspondem ao namespace fornecido.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustomXmlPartsByNamespace(namespaceUri: string): CustomXmlPart[];'
    parameters:
    - id: namespaceUri
      description: Esse deve ser um URI de esquema totalmente qualificado; por exemplo, "http://schemas.contoso.com/review/1.0".
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />[]
      description: ''
- name: getDefaultPivotTableStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultPivotTableStyle()
  summary: Obtém o estilo de Tabela Dinâmica padrão para o escopo do objeto pai.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultPivotTableStyle(): PivotTableStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" />
      description: ''
- name: getDefaultSlicerStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultSlicerStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultSlicerStyle()
  summary: Obtém o `SlicerStyle` padrão para o escopo do objeto pai.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultSlicerStyle(): SlicerStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" />
      description: ''
- name: getDefaultTableStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultTableStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultTableStyle()
  summary: Obtém o estilo de tabela padrão para o escopo do objeto pai.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultTableStyle(): TableStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" />
      description: ''
- name: getDefaultTimelineStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultTimelineStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultTimelineStyle()
  summary: Obtém o estilo de linha do tempo padrão para o escopo do objeto pai.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultTimelineStyle(): TimelineStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" />
      description: ''
- name: getFirstWorksheet(visibleOnly)
  uid: ExcelScript!ExcelScript.Workbook#getFirstWorksheet:member(1)
  package: ExcelScript!
  fullName: getFirstWorksheet(visibleOnly)
  summary: Obtém a primeira planilha na coleção.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFirstWorksheet(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Opcional. Se `true`<!-- -->, considera apenas planilhas visíveis, ignorando todas as ocultas.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getIsDirty()
  uid: ExcelScript!ExcelScript.Workbook#getIsDirty:member(1)
  package: ExcelScript!
  fullName: getIsDirty()
  summary: Especifica se foram feitas alterações desde que a pasta de trabalho foi salva pela última vez. Você pode definir essa propriedade como `true` se quiser fechar uma pasta de trabalho modificada sem salvá-la ou ser solicitado a salvá-la.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIsDirty(): boolean;'
    return:
      type: boolean
      description: ''
- name: getLastWorksheet(visibleOnly)
  uid: ExcelScript!ExcelScript.Workbook#getLastWorksheet:member(1)
  package: ExcelScript!
  fullName: getLastWorksheet(visibleOnly)
  summary: Obtém a última planilha na coleção.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastWorksheet(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Opcional. Se `true`<!-- -->, considera apenas planilhas visíveis, ignorando todas as ocultas.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getLinkedWorkbookByUrl(key)
  uid: ExcelScript!ExcelScript.Workbook#getLinkedWorkbookByUrl:member(1)
  package: ExcelScript!
  fullName: getLinkedWorkbookByUrl(key)
  summary: Obtém informações sobre uma pasta de trabalho vinculada por sua URL. Se a pasta de trabalho não existir, esse método retornará um objeto com sua `isNullObject` propriedade definida como `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLinkedWorkbookByUrl(key: string): LinkedWorkbook | undefined;'
    parameters:
    - id: key
      description: A URL da pasta de trabalho vinculada.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.LinkedWorkbook:interface" /> | undefined
      description: ''
- name: getLinkedWorkbookRefreshMode()
  uid: ExcelScript!ExcelScript.Workbook#getLinkedWorkbookRefreshMode:member(1)
  package: ExcelScript!
  fullName: getLinkedWorkbookRefreshMode()
  summary: Representa o modo de atualização dos links da pasta de trabalho. O modo é o mesmo para todos os links da pasta de trabalho presentes na pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLinkedWorkbookRefreshMode(): WorkbookLinksRefreshMode;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.WorkbookLinksRefreshMode:enum" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```TypeScript\n/**\n * This script refreshes all the links to external workbooks, \n * if the linked workbook refresh mode is set to manual.\n * To learn about linked workbooks, see https://support.microsoft.com/office/create-an-external-reference-link-to-a-cell-range-in-another-workbook-c98d1803-dd75-4668-ac6a-d7cca2a9b95f.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Check the refresh mode.\n  if (workbook.getLinkedWorkbookRefreshMode() === ExcelScript.WorkbookLinksRefreshMode.manual) {\n    console.log(\"Refreshing workbook links\");\n\n    // Trigger a refresh of linked workbook content.\n    workbook.refreshAllLinksToLinkedWorkbooks();\n  }\n}\n```"
- name: getLinkedWorkbooks()
  uid: ExcelScript!ExcelScript.Workbook#getLinkedWorkbooks:member(1)
  package: ExcelScript!
  fullName: getLinkedWorkbooks()
  summary: Retorna uma coleção de pastas de trabalho vinculadas. Em fórmulas, os links da pasta de trabalho podem ser usados para referenciar dados (nomes e valores de célula) fora da pasta de trabalho atual.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLinkedWorkbooks(): LinkedWorkbook[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.LinkedWorkbook:interface" />[]
      description: ''
- name: getName()
  uid: ExcelScript!ExcelScript.Workbook#getName:member(1)
  package: ExcelScript!
  fullName: getName()
  summary: Obtém o nome da pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getName(): string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```TypeScript\n/**\n * This script logs the name of the workbook without the \".xlsx\" extension.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the workbook's name.\n  let name = workbook.getName();\n\n  // Remove the file extension.\n  name = name.substring(0, name.lastIndexOf(\".xlsx\"));\n\n  // Display the name in the console.\n  console.log(name);\n}\n```"
- name: getNamedItem(name)
  uid: ExcelScript!ExcelScript.Workbook#getNamedItem:member(1)
  package: ExcelScript!
  fullName: getNamedItem(name)
  summary: Obtém um `NamedItem` objeto usando seu nome. Se o objeto não existir, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNamedItem(name: string): NamedItem | undefined;'
    parameters:
    - id: name
      description: Nome de nameitem.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" /> | undefined
      description: ''
- name: getNames()
  uid: ExcelScript!ExcelScript.Workbook#getNames:member(1)
  package: ExcelScript!
  fullName: getNames()
  summary: Representa uma coleção de itens nomeados com escopo de pasta de trabalho (intervalos e constantes nomeados).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNames(): NamedItem[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" />[]
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```TypeScript\n/**\n * This script looks for every named range with \"Review\" in the name \n * and marks the range with a yellow fill.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Look at every named item in the workbook.\n  workbook.getNames().forEach((namedItem) => {\n    // Find names containing \"Review\".\n    if (namedItem.getName().includes(\"Review\")) {\n      // Only change the fill color if the named item is a range (not a formula).\n      let itemType: ExcelScript.NamedItemType = namedItem.getType();\n      if (itemType === ExcelScript.NamedItemType.range) {\n        // Set the range's fill color to yellow.\n        namedItem.getRange().getFormat().getFill().setColor(\"yellow\");\n      }\n    }\n  });\n}\n```"
- name: getPivotTable(name)
  uid: ExcelScript!ExcelScript.Workbook#getPivotTable:member(1)
  package: ExcelScript!
  fullName: getPivotTable(name)
  summary: Obtém uma Tabela Dinâmica por nome. Se a Tabela Dinâmica não existir, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTable(name: string): PivotTable | undefined;'
    parameters:
    - id: name
      description: Nome da Tabela Dinâmica a ser recuperada.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" /> | undefined
      description: ''
- name: getPivotTables()
  uid: ExcelScript!ExcelScript.Workbook#getPivotTables:member(1)
  package: ExcelScript!
  fullName: getPivotTables()
  summary: Representa uma coleção de Tabelas Dinâmicas associadas à pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTables(): PivotTable[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" />[]
      description: ''
- name: getPivotTableStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: getPivotTableStyle(name)
  summary: Obtém um `PivotTableStyle` por nome. Se o `PivotTableStyle` não existir, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTableStyle(name: string): PivotTableStyle | undefined;'
    parameters:
    - id: name
      description: Nome do estilo de Tabela Dinâmica a ser recuperado.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" /> | undefined
      description: ''
- name: getPivotTableStyles()
  uid: ExcelScript!ExcelScript.Workbook#getPivotTableStyles:member(1)
  package: ExcelScript!
  fullName: getPivotTableStyles()
  summary: Representa uma coleção de Tabelas Dinâmicas associadas à pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTableStyles(): PivotTableStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" />[]
      description: ''
- name: getPredefinedCellStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: getPredefinedCellStyle(name)
  summary: Obtém um `Style` por nome.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPredefinedCellStyle(name: string): PredefinedCellStyle;'
    parameters:
    - id: name
      description: Nome do estilo a ser recuperado.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PredefinedCellStyle:interface" />
      description: ''
- name: getPredefinedCellStyles()
  uid: ExcelScript!ExcelScript.Workbook#getPredefinedCellStyles:member(1)
  package: ExcelScript!
  fullName: getPredefinedCellStyles()
  summary: Representa uma coleção de estilos associados à pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPredefinedCellStyles(): PredefinedCellStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PredefinedCellStyle:interface" />[]
      description: ''
- name: getPreviouslySaved()
  uid: ExcelScript!ExcelScript.Workbook#getPreviouslySaved:member(1)
  package: ExcelScript!
  fullName: getPreviouslySaved()
  summary: Especifica se a pasta de trabalho já foi salva localmente ou online.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreviouslySaved(): boolean;'
    return:
      type: boolean
      description: ''
- name: getProperties()
  uid: ExcelScript!ExcelScript.Workbook#getProperties:member(1)
  package: ExcelScript!
  fullName: getProperties()
  summary: Obtém as propriedades da pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProperties(): DocumentProperties;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DocumentProperties:interface" />
      description: ''
- name: getProtection()
  uid: ExcelScript!ExcelScript.Workbook#getProtection:member(1)
  package: ExcelScript!
  fullName: getProtection()
  summary: Retorna o objeto de proteção de uma pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProtection(): WorkbookProtection;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.WorkbookProtection:interface" />
      description: ''
- name: getReadOnly()
  uid: ExcelScript!ExcelScript.Workbook#getReadOnly:member(1)
  package: ExcelScript!
  fullName: getReadOnly()
  summary: Retorna `true` se a pasta de trabalho estiver aberta no modo somente leitura.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getReadOnly(): boolean;'
    return:
      type: boolean
      description: ''
- name: getSelectedRange()
  uid: ExcelScript!ExcelScript.Workbook#getSelectedRange:member(1)
  package: ExcelScript!
  fullName: getSelectedRange()
  summary: Obtém o intervalo único selecionado no momento da pasta de trabalho. Se houver vários intervalos selecionados, esse método gerará um erro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRange(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSelectedRanges()
  uid: ExcelScript!ExcelScript.Workbook#getSelectedRanges:member(1)
  package: ExcelScript!
  fullName: getSelectedRanges()
  summary: Obtém um ou mais intervalos atualmente selecionados da pasta de trabalho. Ao contrário `getSelectedRange()`<!-- -->, esse método retorna um `RangeAreas` objeto que representa todos os intervalos selecionados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRanges(): RangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getSlicer(key)
  uid: ExcelScript!ExcelScript.Workbook#getSlicer:member(1)
  package: ExcelScript!
  fullName: getSlicer(key)
  summary: Obtém uma segmentação de dados usando seu nome ou ID. Se a segmentação de dados não existir, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicer(key: string): Slicer | undefined;'
    parameters:
    - id: key
      description: Nome ou ID da segmentação de dados a ser recuperada.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" /> | undefined
      description: ''
- name: getSlicers()
  uid: ExcelScript!ExcelScript.Workbook#getSlicers:member(1)
  package: ExcelScript!
  fullName: getSlicers()
  summary: Representa uma coleção de segmentações de dados associadas à pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicers(): Slicer[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" />[]
      description: ''
- name: getSlicerStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getSlicerStyle:member(1)
  package: ExcelScript!
  fullName: getSlicerStyle(name)
  summary: Obtém um `SlicerStyle` por nome. Se o estilo da segmentação de dados não existir, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicerStyle(name: string): SlicerStyle | undefined;'
    parameters:
    - id: name
      description: Nome do estilo de segmentação a ser recuperado.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" /> | undefined
      description: ''
- name: getSlicerStyles()
  uid: ExcelScript!ExcelScript.Workbook#getSlicerStyles:member(1)
  package: ExcelScript!
  fullName: getSlicerStyles()
  summary: Representa uma coleção de SlicerStyles associados à pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicerStyles(): SlicerStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" />[]
      description: ''
- name: getTable(key)
  uid: ExcelScript!ExcelScript.Workbook#getTable:member(1)
  package: ExcelScript!
  fullName: getTable(key)
  summary: Obtém uma tabela pelo nome ou ID. Se a tabela não existir, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTable(key: string): Table | undefined;'
    parameters:
    - id: key
      description: Nome ou ID da tabela a ser recuperada.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" /> | undefined
      description: ''
- name: getTables()
  uid: ExcelScript!ExcelScript.Workbook#getTables:member(1)
  package: ExcelScript!
  fullName: getTables()
  summary: Representa uma coleção de tabelas associadas à pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTables(): Table[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" />[]
      description: ''
- name: getTableStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getTableStyle:member(1)
  package: ExcelScript!
  fullName: getTableStyle(name)
  summary: Obtém um `TableStyle` por nome. Se o estilo de tabela não existir, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTableStyle(name: string): TableStyle | undefined;'
    parameters:
    - id: name
      description: Nome do estilo de tabela a ser recuperado.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" /> | undefined
      description: ''
- name: getTableStyles()
  uid: ExcelScript!ExcelScript.Workbook#getTableStyles:member(1)
  package: ExcelScript!
  fullName: getTableStyles()
  summary: Representa uma coleção de TableStyles associadas à pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTableStyles(): TableStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" />[]
      description: ''
- name: getTimelineStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getTimelineStyle:member(1)
  package: ExcelScript!
  fullName: getTimelineStyle(name)
  summary: Obtém um `TimelineStyle` por nome. Se o estilo da linha do tempo não existir, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTimelineStyle(name: string): TimelineStyle | undefined;'
    parameters:
    - id: name
      description: Nome do estilo de linha do tempo a ser recuperado.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" /> | undefined
      description: ''
- name: getTimelineStyles()
  uid: ExcelScript!ExcelScript.Workbook#getTimelineStyles:member(1)
  package: ExcelScript!
  fullName: getTimelineStyles()
  summary: Representa uma coleção de TimelineStyles associados à pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTimelineStyles(): TimelineStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" />[]
      description: ''
- name: getUsePrecisionAsDisplayed()
  uid: ExcelScript!ExcelScript.Workbook#getUsePrecisionAsDisplayed:member(1)
  package: ExcelScript!
  fullName: getUsePrecisionAsDisplayed()
  summary: True se os cálculos dessa pasta de trabalho forem efetuados usando apenas a precisão dos números conforme forem exibidos. Os dados perderão permanentemente a precisão ao alternar essa propriedade de `false` para `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsePrecisionAsDisplayed(): boolean;'
    return:
      type: boolean
      description: ''
- name: getWorksheet(key)
  uid: ExcelScript!ExcelScript.Workbook#getWorksheet:member(1)
  package: ExcelScript!
  fullName: getWorksheet(key)
  summary: Obtém um objeto de planilha usando o nome ou ID dele. Se a planilha não existir, esse método retornará `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWorksheet(key: string): Worksheet | undefined;'
    parameters:
    - id: key
      description: O nome ou a ID da planilha.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```TypeScript\n/**\n * This script switches the active view to a worksheet named \"Data\", if it exists.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Check if the \"Data\" worksheet exists.\n  let dataWorksheet = workbook.getWorksheet(\"Data\");\n  if (dataWorksheet) {\n    // Switch to the \"Data\" worksheet.\n    dataWorksheet.activate();\n  } else {\n    console.log(`No worksheet named \"Data\" in this workbook.`);\n  }\n}\n```"
- name: getWorksheets()
  uid: ExcelScript!ExcelScript.Workbook#getWorksheets:member(1)
  package: ExcelScript!
  fullName: getWorksheets()
  summary: Representa uma coleção de planilhas associadas à pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWorksheets(): Worksheet[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />[]
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```TypeScript\n/**\n * This script logs the names of all the worksheets in the workbook.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get all the worksheets in the workbook. \n  let sheets = workbook.getWorksheets();\n\n  // Get a list of all the worksheet names.\n  let names = sheets.map ((sheet) => sheet.getName());\n\n  // Write in the console all the worksheet names and the total count.\n  console.log(names);\n  console.log(`Total worksheets inside of this workbook: ${sheets.length}`);\n}\n```"
- name: refreshAllDataConnections()
  uid: ExcelScript!ExcelScript.Workbook#refreshAllDataConnections:member(1)
  package: ExcelScript!
  fullName: refreshAllDataConnections()
  summary: Atualiza todas as conexões de dados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refreshAllDataConnections(): void;'
    return:
      type: void
      description: ''
- name: refreshAllLinksToLinkedWorkbooks()
  uid: ExcelScript!ExcelScript.Workbook#refreshAllLinksToLinkedWorkbooks:member(1)
  package: ExcelScript!
  fullName: refreshAllLinksToLinkedWorkbooks()
  summary: Faz uma solicitação para atualizar todos os links da pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refreshAllLinksToLinkedWorkbooks(): void;'
    return:
      type: void
      description: ''
- name: refreshAllPivotTables()
  uid: ExcelScript!ExcelScript.Workbook#refreshAllPivotTables:member(1)
  package: ExcelScript!
  fullName: refreshAllPivotTables()
  summary: Atualiza todas as tabelas dinâmicas da coleção.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refreshAllPivotTables(): void;'
    return:
      type: void
      description: ''
- name: setChartDataPointTrack(chartDataPointTrack)
  uid: ExcelScript!ExcelScript.Workbook#setChartDataPointTrack:member(1)
  package: ExcelScript!
  fullName: setChartDataPointTrack(chartDataPointTrack)
  summary: True se todos os gráficos na pasta de trabalho estiverem rastreando os pontos de dados reais aos quais eles estão anexados. False se os gráficos rastrearem o índice dos pontos de dados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setChartDataPointTrack(chartDataPointTrack: boolean): void;'
    parameters:
    - id: chartDataPointTrack
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setDefaultPivotTableStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultPivotTableStyle(newDefaultStyle)
  summary: Define o estilo de Tabela Dinâmica padrão para uso no escopo do objeto pai.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      setDefaultPivotTableStyle(
                  newDefaultStyle: PivotTableStyle | string
              ): void;
    parameters:
    - id: newDefaultStyle
      description: O `PivotTableStyle` objeto, ou o nome do `PivotTableStyle` objeto, que deve ser o novo padrão.
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setDefaultSlicerStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultSlicerStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultSlicerStyle(newDefaultStyle)
  summary: Define o estilo de segmentação de dados padrão para uso no escopo do objeto pai.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDefaultSlicerStyle(newDefaultStyle: SlicerStyle | string): void;'
    parameters:
    - id: newDefaultStyle
      description: O `SlicerStyle` objeto, ou o nome do `SlicerStyle` objeto, que deve ser o novo padrão.
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setDefaultTableStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultTableStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultTableStyle(newDefaultStyle)
  summary: Define o estilo de tabela padrão para uso no escopo do objeto pai.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDefaultTableStyle(newDefaultStyle: TableStyle | string): void;'
    parameters:
    - id: newDefaultStyle
      description: O `TableStyle` objeto, ou o nome do `TableStyle` objeto, que deve ser o novo padrão.
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setDefaultTimelineStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultTimelineStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultTimelineStyle(newDefaultStyle)
  summary: Define o estilo de linha do tempo padrão para uso no escopo do objeto pai.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDefaultTimelineStyle(newDefaultStyle: TimelineStyle | string): void;'
    parameters:
    - id: newDefaultStyle
      description: O `TimelineStyle` objeto, ou o nome do `TimelineStyle` objeto, que deve ser o novo padrão.
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setIsDirty(isDirty)
  uid: ExcelScript!ExcelScript.Workbook#setIsDirty:member(1)
  package: ExcelScript!
  fullName: setIsDirty(isDirty)
  summary: Especifica se foram feitas alterações desde que a pasta de trabalho foi salva pela última vez. Você pode definir essa propriedade como `true` se quiser fechar uma pasta de trabalho modificada sem salvá-la ou ser solicitado a salvá-la.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setIsDirty(isDirty: boolean): void;'
    parameters:
    - id: isDirty
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setLinkedWorkbookRefreshMode(linkedWorkbookRefreshMode)
  uid: ExcelScript!ExcelScript.Workbook#setLinkedWorkbookRefreshMode:member(1)
  package: ExcelScript!
  fullName: setLinkedWorkbookRefreshMode(linkedWorkbookRefreshMode)
  summary: Representa o modo de atualização dos links da pasta de trabalho. O modo é o mesmo para todos os links da pasta de trabalho presentes na pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      setLinkedWorkbookRefreshMode(
                  linkedWorkbookRefreshMode: WorkbookLinksRefreshMode
              ): void;
    parameters:
    - id: linkedWorkbookRefreshMode
      description: ''
      type: <xref uid="ExcelScript!ExcelScript.WorkbookLinksRefreshMode:enum" />
    return:
      type: void
      description: ''
- name: setUsePrecisionAsDisplayed(usePrecisionAsDisplayed)
  uid: ExcelScript!ExcelScript.Workbook#setUsePrecisionAsDisplayed:member(1)
  package: ExcelScript!
  fullName: setUsePrecisionAsDisplayed(usePrecisionAsDisplayed)
  summary: True se os cálculos dessa pasta de trabalho forem efetuados usando apenas a precisão dos números conforme forem exibidos. Os dados perderão permanentemente a precisão ao alternar essa propriedade de `false` para `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setUsePrecisionAsDisplayed(usePrecisionAsDisplayed: boolean): void;'
    parameters:
    - id: usePrecisionAsDisplayed
      description: ''
      type: boolean
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: eac0c41cc07384bce1a23c12a5f047ab32040218
  ms.sourcegitcommit: 497d2ecc546aecf311c23c82110f8f0dfbcde0b9
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 10/20/2022
  ms.locfileid: "68619509"
