### YamlMime:TSType
name: Excel.ConditionalFormatCollection
uid: excel!Excel.ConditionalFormatCollection:interface
package: excel!
fullName: Excel.ConditionalFormatCollection
summary: Representa uma coleção de todos os formatos condicionais que se sobrepõem ao intervalo.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: add(type)
  uid: excel!Excel.ConditionalFormatCollection#add:member(1)
  package: excel!
  fullName: add(type)
  summary: Adiciona um novo formato condicional à coleção na prioridade First/Top.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      add(
                  type:
                      | ConditionalFormatType
                      | "Custom"
                      | "DataBar"
                      | "ColorScale"
                      | "IconSet"
                      | "TopBottom"
                      | "PresetCriteria"
                      | "ContainsText"
                      | "CellValue"
              ): ConditionalFormat;
    parameters:
    - id: type
      description: O tipo de formato condicional que está sendo adicionado. Consulte Excel. Valorconditionalformattype para obter detalhes.
      type: "| <xref uid=\"excel!Excel.ConditionalFormatType:enum\" />\n                | \"Custom\"\n                | \"DataBar\"\n                | \"ColorScale\"\n                | \"IconSet\"\n                | \"TopBottom\"\n                | \"PresetCriteria\"\n                | \"ContainsText\"\n                | \"CellValue\"\n        "
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = sheet.getRange(\"B2:M5\");\n    let conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.colorScale);\n    let criteria = {\n        minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n        midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n        maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n}\n```"
- name: clearAll()
  uid: excel!Excel.ConditionalFormatCollection#clearAll:member(1)
  package: excel!
  fullName: clearAll()
  summary: Limpa todos os formatos condicionais ativos no intervalo atual especificado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearAll(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = sheet.getRange();\n    range.conditionalFormats.clearAll();\n\n    await context.sync();\n\n    $(\".conditional-formats\").hide();\n}\n```"
- name: getCount()
  uid: excel!Excel.ConditionalFormatCollection#getCount:member(1)
  package: excel!
  fullName: getCount()
  summary: Retorna o número de formatos condicionais na pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(): ClientResult<number>;'
    return:
      type: <xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;
      description: ''
- name: getItem(id)
  uid: excel!Excel.ConditionalFormatCollection#getItem:member(1)
  package: excel!
  fullName: getItem(id)
  summary: Retorna um formato condicional para o ID fornecido.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(id: string): ConditionalFormat;'
    parameters:
    - id: id
      description: A ID da formatação condicional.
      type: string
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:interface" />
      description: ''
- name: getItemAt(index)
  uid: excel!Excel.ConditionalFormatCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: Retorna um formato condicional no índice fornecido.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): ConditionalFormat;'
    parameters:
    - id: index
      description: Índice dos formatos condicionais a serem recuperados.
      type: number
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:interface" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.ConditionalFormatCollection#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
      type: string | string[]
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: d18e80984a5ac43265b468d2d775fd98df1cd30a
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49414220"
