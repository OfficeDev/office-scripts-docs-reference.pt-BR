### YamlMime:TSType
name: Excel.DataValidation
uid: excel!Excel.DataValidation:interface
package: excel!
fullName: Excel.DataValidation
summary: Representa a validação de dados aplicada ao intervalo atual. Para saber mais sobre o modelo de objeto de validação de dados, leia [Adicionar validação de dados para intervalos do Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)<!-- -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: errorAlert
  uid: excel!Excel.DataValidation#errorAlert:member
  package: excel!
  fullName: errorAlert
  summary: Alerta de erro quando o usuário insere dados inválidos.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'errorAlert: DataValidationErrorAlert;'
    return:
      type: <xref uid="excel!Excel.DataValidationErrorAlert:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Decision\");\n    let commentsRange = \n        sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Comments\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    commentsRange.dataValidation.clear();   \n\n    // If the value of A2 is contained in the value of C2, then \n    // SEARCH(A2,C2) returns the number where it begins. Otherwise,\n    // it does not return a number.\n    let redundantStringRule = {\n        custom: {\n            formula: \"=NOT(ISNUMBER(SEARCH(A2,C2)))\"\n        }\n    };\n    commentsRange.dataValidation.rule = redundantStringRule;\n    commentsRange.dataValidation.errorAlert = {\n        message: \"It is redundant to include the baby name in the comment.\",\n        showAlert: true,\n        style: \"Information\",\n        title: \"Baby Name in Comment\"\n    };\n\n    await context.sync();\n}\n```"
- name: ignoreBlanks
  uid: excel!Excel.DataValidation#ignoreBlanks:member
  package: excel!
  fullName: ignoreBlanks
  summary: Especifica se a validação de dados será executada em células em branco, o padrão é true.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ignoreBlanks: boolean;'
    return:
      type: boolean
- name: prompt
  uid: excel!Excel.DataValidation#prompt:member
  package: excel!
  fullName: prompt
  summary: Avisar quando os usuários selecionarem uma célula.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'prompt: DataValidationPrompt;'
    return:
      type: <xref uid="excel!Excel.DataValidationPrompt:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Decision\");\n    let rankingRange = sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Ranking\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    rankingRange.dataValidation.clear();\n\n    let greaterThanZeroRule = {\n        wholeNumber: {\n            formula1: 0,\n            operator: Excel.DataValidationOperator.greaterThan\n        }\n    };\n    rankingRange.dataValidation.rule = greaterThanZeroRule;\n\n    rankingRange.dataValidation.prompt = {\n        message: \"Please enter a positive number.\",\n        showPrompt: true,\n        title: \"Positive numbers only.\"\n    };\n\n    rankingRange.dataValidation.errorAlert = {\n        message: \"Sorry, only positive numbers are allowed\",\n        showAlert: true,\n        style: \"Stop\",\n        title: \"Negative Number Entered\"\n    };\n\n    await context.sync();\n}\n```"
- name: rule
  uid: excel!Excel.DataValidation#rule:member
  package: excel!
  fullName: rule
  summary: Regra de validação de dados que contém diferentes tipos de critérios de validação de dados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'rule: DataValidationRule;'
    return:
      type: <xref uid="excel!Excel.DataValidationRule:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Decision\");\n    let nameRange = \n        sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Baby Name\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    nameRange.dataValidation.clear();\n\n    let nameSourceRange = context.workbook.worksheets.getItem(\"Names\").getRange(\"A1:A3\");\n\n    let approvedListRule = {\n        list: {\n            inCellDropDown: true,\n            source: nameSourceRange\n        }\n    };\n    nameRange.dataValidation.rule = approvedListRule;\n\n    await context.sync();\n}\n```"
- name: type
  uid: excel!Excel.DataValidation#type:member
  package: excel!
  fullName: type
  summary: Tipo de validação de dados, confira Excel.DataValidationType para obter detalhes.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      readonly type:
                  | DataValidationType
                  | "None"
                  | "WholeNumber"
                  | "Decimal"
                  | "List"
                  | "Date"
                  | "Time"
                  | "TextLength"
                  | "Custom"
                  | "Inconsistent"
                  | "MixedCriteria";
    return:
      type: >-
        | <xref uid="excel!Excel.DataValidationType:enum" />
                    | "None"
                    | "WholeNumber"
                    | "Decimal"
                    | "List"
                    | "Date"
                    | "Time"
                    | "TextLength"
                    | "Custom"
                    | "Inconsistent"
                    | "MixedCriteria"
- name: valid
  uid: excel!Excel.DataValidation#valid:member
  package: excel!
  fullName: valid
  summary: Representa se todos os valores de célula são válidos de acordo com as regras de validação de dados. Retorna true se todos os valores de célula forem válidos ou false se todos os valores de célula forem inválidos. Retorna NULL se houver valores de célula válidos e inválidos no intervalo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly valid: boolean;'
    return:
      type: boolean
methods:
- name: clear()
  uid: excel!Excel.DataValidation#clear:member(1)
  package: excel!
  fullName: clear()
  summary: Desfazer a validação de dados do intervalo atual.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(): void;'
    return:
      type: void
      description: ''
- name: getInvalidCells()
  uid: excel!Excel.DataValidation#getInvalidCells:member(1)
  package: excel!
  fullName: getInvalidCells()
  summary: Retorna um RangeAreas, que consiste em um ou mais intervalos retangulares, com valores inválidos de célula. Se todos os valores de célula forem válidos, essa função gerará um erro ItemNotFound.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getInvalidCells(): RangeAreas;'
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: ''
- name: getInvalidCellsOrNullObject()
  uid: excel!Excel.DataValidation#getInvalidCellsOrNullObject:member(1)
  package: excel!
  fullName: getInvalidCellsOrNullObject()
  summary: Retorna um RangeAreas, que consiste em um ou mais intervalos retangulares, com valores inválidos de célula. Se todos os valores de célula forem válidos, essa função retornará null.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getInvalidCellsOrNullObject(): RangeAreas;'
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.DataValidation#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
      type: string | string[]
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 6ba161c663afaf28f62aa0ad1f6b2e6bc3a2d9be
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49416285"
