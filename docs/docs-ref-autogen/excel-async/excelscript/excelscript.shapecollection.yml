### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ShapeCollection:interface'
    summary: Representa uma coleção de todas as formas na planilha.
    name: Excel.ShapeCollection
    fullName: Excel.ShapeCollection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.ShapeCollection#_GetItem:member(1)'
      - 'excel!Excel.ShapeCollection#addGeometricShape:member(1)'
      - 'excel!Excel.ShapeCollection#addGroup:member(1)'
      - 'excel!Excel.ShapeCollection#addImage:member(1)'
      - 'excel!Excel.ShapeCollection#addLine:member(1)'
      - 'excel!Excel.ShapeCollection#addTextBox:member(1)'
      - 'excel!Excel.ShapeCollection#getCount:member(1)'
      - 'excel!Excel.ShapeCollection#getItem:member(1)'
      - 'excel!Excel.ShapeCollection#getItemAt:member(1)'
      - 'excel!Excel.ShapeCollection#load:member(1)'
  - uid: 'excel!Excel.ShapeCollection#_GetItem:member(1)'
    summary: Retorna uma forma identificada pela ID da forma.
    name: _GetItem(shapeId)
    fullName: _GetItem(shapeId)
    langs:
      - typeScript
    type: method
    syntax:
      content: '_GetItem(shapeId: string): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: ''
      parameters:
        - id: shapeId
          description: O identificador da forma.
          type:
            - string
  - uid: 'excel!Excel.ShapeCollection#addGeometricShape:member(1)'
    summary: Adiciona uma forma geométrica à planilha. Retorna um objeto Shape que representa a nova forma.
    name: addGeometricShape(geometricShapeType)
    fullName: addGeometricShape(geometricShapeType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addGeometricShape(geometricShapeType: GeometricShapeType): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.hexagon);
              shape.left = 5;
              shape.top = 5;
              shape.height = 175;
              shape.width = 200;
              await context.sync();
          }
          ```
      parameters:
        - id: geometricShapeType
          description: 'Representa o tipo da forma geométrica. Para saber detalhes, confira Excel.GeometricShapeType.'
          type:
            - 'excel!Excel.GeometricShapeType:enum'
  - uid: 'excel!Excel.ShapeCollection#addGroup:member(1)'
    summary: Um subconjunto de formas na planilha do conjunto de grupos. Retorna um objeto Shape que representa o novo grupo de formas.
    name: addGroup(values)
    fullName: addGroup(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addGroup(values: Array<string | Shape>): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let square = sheet.shapes.getItem("Square");
              let pentagon = sheet.shapes.getItem("Pentagon");
              let octagon = sheet.shapes.getItem("Octagon");

              let shapeGroup = sheet.shapes.addGroup([square, pentagon, octagon]);
              shapeGroup.name = "Group";
              console.log("Shapes grouped");

              await context.sync();
          }
          ```
      parameters:
        - id: values
          description: Uma matriz de ID da forma ou objetos Shape.
          type:
            - 'excel!Excel.ShapeCollection#addGroup~0:complex'
  - uid: 'excel!Excel.ShapeCollection#addImage:member(1)'
    summary: Cria uma imagem de uma cadeia de caracteres na base 64 e a adiciona à planilha. Retorna o objeto Shape que representa a nova imagem.
    name: addImage(base64ImageString)
    fullName: addImage(base64ImageString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addImage(base64ImageString: string): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```javascript
          let myFile = <HTMLInputElement>document.getElementById("selectedFile");
          let reader = new FileReader();

          reader.onload = (event) => {
              Excel.run((context) => {
                  let startIndex = reader.result.toString().indexOf("base64,");
                  let mybase64 = reader.result.toString().substr(startIndex + 7);
                  let sheet = context.workbook.worksheets.getItem("Shapes");
                  let image = sheet.shapes.addImage(mybase64);
                  image.name = "Image";
                  return context.sync();
              });
          };

          // Read in the image file as a data URL.
          reader.readAsDataURL(myFile.files[0]);
          ```
      parameters:
        - id: base64ImageString
          description: Uma cadeia de caracteres codificada em base64 que representa uma imagem no formato JPEG ou PNG.
          type:
            - string
  - uid: 'excel!Excel.ShapeCollection#addLine:member(1)'
    summary: Adiciona uma linha à planilha. Retorna um objeto Shape que representa a nova linha.
    name: 'addLine(startLeft, startTop, endLeft, endTop, connectorType)'
    fullName: 'addLine(startLeft, startTop, endLeft, endTop, connectorType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addLine(
                    startLeft: number,
                    startTop: number,
                    endLeft: number,
                    endTop: number,
                    connectorType?: ConnectorType
                ): Shape;
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
              let line = shapes.addLine(200, 50, 300, 150, Excel.ConnectorType.straight);
              line.name = "StraightLine";
              await context.sync();
          }
          ```
      parameters:
        - id: startLeft
          description: 'A distância, em pontos, desde o início da linha até o lado esquerdo da planilha.'
          type:
            - number
        - id: startTop
          description: 'A distância, em pontos, desde o início da linha até a parte superior da planilha.'
          type:
            - number
        - id: endLeft
          description: 'A distância, em pontos, do final da linha à esquerda da planilha.'
          type:
            - number
        - id: endTop
          description: 'A distância, em pontos, do final da linha até a parte superior da planilha.'
          type:
            - number
        - id: connectorType
          description: Representa o tipo de conector. Confira Excel. ConnectorType para obter detalhes.
          type:
            - 'excel!Excel.ConnectorType:enum'
  - uid: 'excel!Excel.ShapeCollection#addTextBox:member(1)'
    summary: Adiciona uma caixa de texto na planilha com o texto fornecido como conteúdo. Retorna um objeto Shape que representa a nova caixa de texto.
    name: addTextBox(text)
    fullName: addTextBox(text)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTextBox(text?: string): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
              let textbox = shapes.addTextBox("A box with text");
              textbox.left = 100;
              textbox.top = 100;
              textbox.height = 20;
              textbox.width = 175;
              textbox.name = "Textbox";
              await context.sync();
          }
          ```
      parameters:
        - id: text
          description: Representa o texto que será mostrado na caixa de texto criado.
          type:
            - string
  - uid: 'excel!Excel.ShapeCollection#getCount:member(1)'
    summary: Retorna o número de formas da planilha.
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'excel!Excel.ShapeCollection#getItem:member(1)'
    summary: Obtém uma forma usando seu nome ou ID.
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: ''
      parameters:
        - id: key
          description: Nome ou ID da forma a ser recuperada.
          type:
            - string
  - uid: 'excel!Excel.ShapeCollection#getItemAt:member(1)'
    summary: Obtém uma forma usando sua posição na coleção.
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Shape;'
      return:
        type:
          - 'excel!Excel.Shape:interface'
        description: ''
      parameters:
        - id: index
          description: O índice com base em zero da forma a ser recuperada.
          type:
            - number
  - uid: 'excel!Excel.ShapeCollection#load:member(1)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.Shape:interface'
    name: Shape
    fullName: Excel.Shape
  - uid: 'excel!Excel.GeometricShapeType:enum'
    name: GeometricShapeType
    fullName: Excel.GeometricShapeType
  - uid: 'excel!Excel.ShapeCollection#addGroup~0:complex'
    name: Array<string | Shape>
    fullName: Array<string | Excel.Shape>
    spec.typeScript:
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: '<string | '
        fullName: '<string | '
      - uid: 'excel!Excel.Shape:interface'
        name: Shape
        fullName: Excel.Shape
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.ConnectorType:enum'
    name: ConnectorType
    fullName: Excel.ConnectorType