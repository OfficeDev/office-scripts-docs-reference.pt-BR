### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Range:interface'
    summary: 'Intervalo representa um conjunto de uma ou mais células contíguas, como uma célula, uma linha, uma coluna, um bloco de células, etc. Para saber mais sobre como os intervalos são usados em toda a API, leia [trabalhar com intervalos usando a API JavaScript do Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) e [trabalhe com intervalos usando a API JavaScript do Excel (avançado)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)<!-- -->.'
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.Range#address:member'
      - 'excel!Excel.Range#addressLocal:member'
      - 'excel!Excel.Range#autoFill:member(1)'
      - 'excel!Excel.Range#calculate:member(1)'
      - 'excel!Excel.Range#cellCount:member'
      - 'excel!Excel.Range#clear:member(1)'
      - 'excel!Excel.Range#columnCount:member'
      - 'excel!Excel.Range#columnHidden:member'
      - 'excel!Excel.Range#columnIndex:member'
      - 'excel!Excel.Range#conditionalFormats:member'
      - 'excel!Excel.Range#convertDataTypeToText:member(1)'
      - 'excel!Excel.Range#convertToLinkedDataType:member(1)'
      - 'excel!Excel.Range#copyFrom:member(1)'
      - 'excel!Excel.Range#dataValidation:member'
      - 'excel!Excel.Range#delete:member(1)'
      - 'excel!Excel.Range#find:member(1)'
      - 'excel!Excel.Range#findOrNullObject:member(1)'
      - 'excel!Excel.Range#flashFill:member(1)'
      - 'excel!Excel.Range#format:member'
      - 'excel!Excel.Range#formulas:member'
      - 'excel!Excel.Range#formulasLocal:member'
      - 'excel!Excel.Range#formulasR1C1:member'
      - 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
      - 'excel!Excel.Range#getBoundingRect:member(1)'
      - 'excel!Excel.Range#getCell:member(1)'
      - 'excel!Excel.Range#getColumn:member(1)'
      - 'excel!Excel.Range#getColumnsAfter:member(1)'
      - 'excel!Excel.Range#getColumnsBefore:member(1)'
      - 'excel!Excel.Range#getEntireColumn:member(1)'
      - 'excel!Excel.Range#getEntireRow:member(1)'
      - 'excel!Excel.Range#getImage:member(1)'
      - 'excel!Excel.Range#getIntersection:member(1)'
      - 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
      - 'excel!Excel.Range#getLastCell:member(1)'
      - 'excel!Excel.Range#getLastColumn:member(1)'
      - 'excel!Excel.Range#getLastRow:member(1)'
      - 'excel!Excel.Range#getOffsetRange:member(1)'
      - 'excel!Excel.Range#getPivotTables:member(1)'
      - 'excel!Excel.Range#getResizedRange:member(1)'
      - 'excel!Excel.Range#getRow:member(1)'
      - 'excel!Excel.Range#getRowsAbove:member(1)'
      - 'excel!Excel.Range#getRowsBelow:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(1)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
      - 'excel!Excel.Range#getSurroundingRegion:member(1)'
      - 'excel!Excel.Range#getTables:member(1)'
      - 'excel!Excel.Range#getUsedRange:member(1)'
      - 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Range#getVisibleView:member(1)'
      - 'excel!Excel.Range#group:member(1)'
      - 'excel!Excel.Range#height:member'
      - 'excel!Excel.Range#hidden:member'
      - 'excel!Excel.Range#hideGroupDetails:member(1)'
      - 'excel!Excel.Range#hyperlink:member'
      - 'excel!Excel.Range#insert:member(1)'
      - 'excel!Excel.Range#isEntireColumn:member'
      - 'excel!Excel.Range#isEntireRow:member'
      - 'excel!Excel.Range#left:member'
      - 'excel!Excel.Range#linkedDataTypeState:member'
      - 'excel!Excel.Range#load:member(1)'
      - 'excel!Excel.Range#merge:member(1)'
      - 'excel!Excel.Range#moveTo:member(1)'
      - 'excel!Excel.Range#numberFormat:member'
      - 'excel!Excel.Range#numberFormatLocal:member'
      - 'excel!Excel.Range#removeDuplicates:member(1)'
      - 'excel!Excel.Range#replaceAll:member(1)'
      - 'excel!Excel.Range#rowCount:member'
      - 'excel!Excel.Range#rowHidden:member'
      - 'excel!Excel.Range#rowIndex:member'
      - 'excel!Excel.Range#select:member(1)'
      - 'excel!Excel.Range#setDirty:member(1)'
      - 'excel!Excel.Range#showCard:member(1)'
      - 'excel!Excel.Range#showGroupDetails:member(1)'
      - 'excel!Excel.Range#sort:member'
      - 'excel!Excel.Range#style:member'
      - 'excel!Excel.Range#text:member'
      - 'excel!Excel.Range#top:member'
      - 'excel!Excel.Range#ungroup:member(1)'
      - 'excel!Excel.Range#unmerge:member(1)'
      - 'excel!Excel.Range#values:member'
      - 'excel!Excel.Range#valueTypes:member'
      - 'excel!Excel.Range#width:member'
      - 'excel!Excel.Range#worksheet:member'
  - uid: 'excel!Excel.Range#address:member'
    summary: 'Especifica a referência de intervalo no estilo a1. O valor de endereço conterá a referência de planilha (por exemplo, "Planilha1! A1: B4 ").'
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#addressLocal:member'
    summary: Especifica a referência de intervalo para o intervalo especificado no idioma do usuário.
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#autoFill:member(1)'
    summary: |-
      Preenche o intervalo do intervalo atual com o intervalo de destino especificado usando a lógica de preenchimento automático especificada. O intervalo de destino pode ser nulo, ou pode estender a fonte horizontal ou verticalmente. Não há suporte para intervalos não contíguos.

      Para obter mais informações, ler preenchimento [automático e preenchimento relâmpago](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        autoFill(
                    destinationRange?: Range | string,
                    autoFillType?:
                        | AutoFillType
                        | "FillDefault"
                        | "FillCopy"
                        | "FillSeries"
                        | "FillFormats"
                        | "FillValues"
                        | "FillDays"
                        | "FillWeekdays"
                        | "FillMonths"
                        | "FillYears"
                        | "LinearTrend"
                        | "GrowthTrend"
                        | "FlashFill"
                ): void;
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
            let sheet = context.workbook.worksheets.getActiveWorksheet();
            let sumCell = sheet.getRange("P4");
            
            // Copy everything. The formulas will be contextually updated based on their new locations.
            sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
            sumCell.format.autofitColumns();
            await context.sync();
          }
          ```
      parameters:
        - id: destinationRange
          description: 'O intervalo de destino para preenchimento automático. Se o intervalo de destino for nulo, os dados serão preenchidos com base nas células ao redor (que é o comportamento ao clicar duas vezes na alça de preenchimento do intervalo da interface do usuário).'
          type:
            - 'excel!Excel.Range#autoFill~0:complex'
        - id: autoFillType
          description: 'O tipo de preenchimento automático. Especifica como o intervalo de destino deve ser preenchido, com base no conteúdo do intervalo atual. O padrão é "FillDefault".'
          type:
            - 'excel!Excel.Range#autoFill~1:complex'
  - uid: 'excel!Excel.Range#calculate:member(1)'
    summary: Calcula um intervalo de células em uma planilha.
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#cellCount:member'
    summary: Especifica o número de células no intervalo. Essa API retornará -1 se a contagem de células exceder 2^31-1 (2.147.483.647).
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#clear:member(1)'
    summary: 'Limpe valores de intervalo, formatação, preenchimento, bordas, etc.'
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        clear(
                    applyTo?:
                        | ClearApplyTo
                        | "All"
                        | "Formats"
                        | "Contents"
                        | "Hyperlinks"
                        | "RemoveHyperlinks"
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyTo
          description: Opcional. Determina o tipo de ação clara. Consulte Excel. ClearApplyTo para obter detalhes.
          type:
            - 'excel!Excel.Range#clear~0:complex'
  - uid: 'excel!Excel.Range#columnCount:member'
    summary: Especifica o número total de colunas no intervalo.
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#columnHidden:member'
    summary: Representa se todas as colunas do intervalo atual estão ocultas.
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#columnIndex:member'
    summary: Especifica o número de coluna da primeira célula do intervalo. Indexados com zero.
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#conditionalFormats:member'
    summary: O conjunto de ConditionalFormats que interseccionam o intervalo.
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:interface'
  - uid: 'excel!Excel.Range#convertDataTypeToText:member(1)'
    summary: Converte o intervalo de células com tipos de dados em texto.
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#convertToLinkedDataType:member(1)'
    summary: Converte as células de intervalo em um tipo de dados vinculado na planilha.
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        convertToLinkedDataType(
                    serviceID: number,
                    languageCulture: string
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: A ID de serviço que será usada para consultar os dados.
          type:
            - number
        - id: languageCulture
          description: Cultura de idioma para consultar o serviço.
          type:
            - string
  - uid: 'excel!Excel.Range#copyFrom:member(1)'
    summary: Copia a formatação ou dados da célula do intervalo de origem ou de RangeAreas para o intervalo atual. O intervalo de destino pode ser um tamanho diferente do intervalo de origem ou RangeAreas. O destino será expandido automaticamente se for menor do que a origem.
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?:
                        | RangeCopyType
                        | "All"
                        | "Formulas"
                        | "Values"
                        | "Formats",
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.getRange("F2").values = [["Copied Formula"]];
              sheet.getRange("F2").format.autofitColumns();

              // copy a range preserving the formulas
              // note: non-formula values are copied over as is
              sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
              await context.sync();
          }
          ```
      parameters:
        - id: sourceRange
          description: 'O intervalo de origem ou RangeAreas a ser copiado. Quando o RangeAreas de origem tem vários intervalos, seu formulário deve poder ser criado removendo linhas ou colunas completas de um intervalo retangular.'
          type:
            - 'excel!Excel.Range#copyFrom~0:complex'
        - id: copyType
          description: O tipo de dados da célula ou formatação a ser copiada. O padrão é "All".
          type:
            - 'excel!Excel.Range#copyFrom~1:complex'
        - id: skipBlanks
          description: True se para ignorar células em branco no intervalo de origem. O padrão é false.
          type:
            - boolean
        - id: transpose
          description: True se para transpor as células no intervalo de destino. O padrão é false.
          type:
            - boolean
  - uid: 'excel!Excel.Range#dataValidation:member'
    summary: Retorna um objeto de validação de dados.
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:interface'
  - uid: 'excel!Excel.Range#delete:member(1)'
    summary: Exclui as células associadas ao intervalo.
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: DeleteShiftDirection | "Up" | "Left"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: Especifica como deslocar as células. Consulte Excel. DeleteShiftDirection para obter detalhes.
          type:
            - 'excel!Excel.Range#delete~0:complex'
  - uid: 'excel!Excel.Range#find:member(1)'
    summary: 'Localiza certa cadeia de caracteres com base em critérios especificados. Se o intervalo atual for maior que uma única célula, a pesquisa será limitada a esse intervalo, caso contrário, a pesquisa cobrirá toda a planilha que começa após essa célula.'
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: SearchCriteria): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: text
          description: A cadeia de caracteres a ser localizada.
          type:
            - string
        - id: criteria
          description: 'Critérios de pesquisa adicionais, incluindo a direção da pesquisa e se a pesquisa precisa corresponder à célula inteira ou diferenciar maiúsculas de minúsculas.'
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#findOrNullObject:member(1)'
    summary: 'Localiza certa cadeia de caracteres com base em critérios especificados. Se o intervalo atual for maior que uma única célula, a pesquisa será limitada a esse intervalo, caso contrário, a pesquisa cobrirá toda a planilha que começa após essa célula. Se não houver nenhuma correspondência, esta função retornará um objeto NULL.'
    name: 'findOrNullObject(text, criteria)'
    fullName: 'findOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findOrNullObject(text: string, criteria: SearchCriteria): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let table = sheet.tables.getItem("ExpensesTable");
              let searchRange = table.getRange();
              let foundRange = searchRange.findOrNullObject($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();

              if (foundRange.isNullObject) {
                  console.log("Text not found");
              } else {
                  console.log(foundRange.address);
              }
          }
          ```
      parameters:
        - id: text
          description: A cadeia de caracteres a ser localizada.
          type:
            - string
        - id: criteria
          description: 'Critérios de pesquisa adicionais, incluindo a direção da pesquisa e se a pesquisa precisa corresponder à célula inteira ou diferenciar maiúsculas de minúsculas.'
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#flashFill:member(1)'
    summary: 'Faz o preenchimento relâmpago no intervalo atual. O preenchimento relâmpago preenche automaticamente dados quando detecta um padrão. Portanto, o intervalo deve ser de coluna única e ter dados em torno para encontrar o padrão.'
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#format:member'
    summary: 'Retorna um objeto de formato que encapsula a fonte, o preenchimento, as bordas, o alinhamento e outras propriedades do intervalo.'
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:interface'
  - uid: 'excel!Excel.Range#formulas:member'
    summary: Representa a fórmula em notação A1.
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasLocal:member'
    summary: 'Represents the formula in A1-style notation, in the user''s language and number-formatting locale. For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.'
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasR1C1:member'
    summary: Representa a fórmula em notação no estilo L1C1.
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
    summary: 'Obtém um objeto Range com a mesma célula superior esquerda do objeto Range atual, mas com os números especificados de linhas e colunas.'
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: numRows
          description: O número de linhas do novo tamanho de intervalo.
          type:
            - number
        - id: numColumns
          description: O número de colunas do novo tamanho de intervalo.
          type:
            - number
  - uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    summary: 'Obtém o menor objeto Range que engloba os intervalos determinados. Por exemplo, o GetBoundingRect de "B2:C5" e "D10:E15" é "B2:E15".'
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: O nome ou endereço do intervalo ou o objeto Range.
          type:
            - 'excel!Excel.Range#getBoundingRect~0:complex'
  - uid: 'excel!Excel.Range#getCell:member(1)'
    summary: 'Obtém o objeto de intervalo que contém a célula única com base nos números de linha e de coluna. A célula pode estar fora dos limites de seu intervalo pai, desde que ela permaneça dentro da grade da planilha. A localização da célula retornada está relacionada à célula superior esquerda do intervalo.'
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: row
          description: O número da linha da célula a ser recuperada. Indexados com zero.
          type:
            - number
        - id: column
          description: O número da coluna da célula a ser recuperada. Indexados com zero.
          type:
            - number
  - uid: 'excel!Excel.Range#getColumn:member(1)'
    summary: Obtém uma coluna incluída no intervalo.
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: column
          description: O número da coluna do intervalo a ser recuperado. Indexados com zero.
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnsAfter:member(1)'
    summary: Obtém um determinado número de colunas à direita do objeto Range atual.
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnsBefore:member(1)'
    summary: Obtém um determinado número de colunas à esquerda do objeto Range atual.
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    summary: 'Obtém um objeto que representa a coluna inteira do intervalo (por exemplo, se o intervalo atual representa as células "B4: E11", seu `getEntireColumn` é um intervalo que representa as colunas "B:E").'
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getEntireRow:member(1)'
    summary: 'Obtém um objeto que representa a linha inteira do intervalo (por exemplo, se o intervalo atual representa as células "B4: E11", seu `GetEntireRow` é um intervalo que representa as linhas "4:11").'
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getImage:member(1)'
    summary: Renderiza o intervalo como uma imagem png codificada em base64.
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.Range#getImage~0:complex'
        description: ''
  - uid: 'excel!Excel.Range#getIntersection:member(1)'
    summary: Obtém o objeto de intervalo que representa a interseção retangular dos intervalos determinados.
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: O objeto Range ou o endereço do intervalo que será usado para determinar a interseção de intervalos.
          type:
            - 'excel!Excel.Range#getIntersection~0:complex'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
    summary: 'Obtém o objeto de intervalo que representa a interseção retangular dos intervalos determinados. Se nenhuma interseção for encontrada, retornará um objeto null.'
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let salesTable = sheet.tables.getItem("SalesTable");
              let dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              let usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              let currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              let asianSalesRange = sheet.getRange("A2:E4");
              let europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              let asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              let europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          }
          ```
      parameters:
        - id: anotherRange
          description: O objeto Range ou o endereço do intervalo que será usado para determinar a interseção de intervalos.
          type:
            - 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
  - uid: 'excel!Excel.Range#getLastCell:member(1)'
    summary: 'Obtém a última célula do intervalo. Por exemplo, a última célula de "B2:D5" é "D5".'
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getLastColumn:member(1)'
    summary: 'Obtém a última coluna do intervalo. Por exemplo, a última coluna de "B2:D5" é "D2:D5".'
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getLastRow:member(1)'
    summary: 'Obtém a última linha do intervalo. Por exemplo, a última linha de "B2:D5" é "B5:D5".'
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    summary: 'Gets an object which represents a range that''s offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.'
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: rowOffset
          description: 'The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.'
          type:
            - number
        - id: columnOffset
          description: 'The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.'
          type:
            - number
  - uid: 'excel!Excel.Range#getPivotTables:member(1)'
    summary: Obtém uma coleção com escopo de tabelas dinâmicas que se sobrepõe ao intervalo.
    name: getPivotTables(fullyContained)
    fullName: getPivotTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTables(fullyContained?: boolean): PivotTableScopedCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableScopedCollection:interface'
        description: ''
      parameters:
        - id: fullyContained
          description: 'Se true, retornará somente as tabelas dinâmicas que estão totalmente contidas dentro dos limites do intervalo. O valor padrão é falso.'
          type:
            - boolean
  - uid: 'excel!Excel.Range#getResizedRange:member(1)'
    summary: 'Obtém um objeto Range semelhante ao objeto Range atual, mas com seu canto inferior direito expandido (ou recolhido) por um determinado número de linhas e colunas.'
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: deltaRows
          description: 'The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.'
          type:
            - number
        - id: deltaColumns
          description: 'O número de colunas pelas quais expandir o canto inferior direito, em relação ao intervalo atual. Use um número positivo para expandir o intervalo ou um número negativo para diminuí-lo.'
          type:
            - number
  - uid: 'excel!Excel.Range#getRow:member(1)'
    summary: Obtém uma linha contida no intervalo.
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: row
          description: O número da linha do intervalo a ser recuperado. Indexados com zero.
          type:
            - number
  - uid: 'excel!Excel.Range#getRowsAbove:member(1)'
    summary: Obtém um determinado número de linhas acima do objeto Range atual.
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'excel!Excel.Range#getRowsBelow:member(1)'
    summary: Obtém um determinado número de linhas abaixo do objeto Range atual.
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'excel!Excel.Range#getSpecialCells:member(1)'
    summary: 'Obtém o objeto RangeAreas, compreendendo um ou mais intervalos retangulares, que representa todas as células que correspondem ao tipo e valor especificado. Se nenhuma célula especial for encontrada, um erro ItemNotFound será lançado.'
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCells(
                    cellType:
                        | SpecialCellType
                        | "ConditionalFormats"
                        | "DataValidations"
                        | "Blanks"
                        | "Constants"
                        | "Formulas"
                        | "SameConditionalFormat"
                        | "SameDataValidation"
                        | "Visible",
                    cellValueType?:
                        | SpecialCellValueType
                        | "All"
                        | "Errors"
                        | "ErrorsLogical"
                        | "ErrorsNumbers"
                        | "ErrorsText"
                        | "ErrorsLogicalNumber"
                        | "ErrorsLogicalText"
                        | "ErrorsNumberText"
                        | "Logical"
                        | "LogicalNumbers"
                        | "LogicalText"
                        | "LogicalNumbersText"
                        | "Numbers"
                        | "NumbersText"
                        | "Text"
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: O tipo de células a serem incluídas.
          type:
            - 'excel!Excel.Range#getSpecialCells~0:complex'
        - id: cellValueType
          description: 'Se CellType for Constants ou formulas, esse argumento será usado para determinar quais tipos de células incluir no resultado. Esses valores podem ser combinados em conjunto para retornar mais de um tipo. O padrão é selecionar todas as constantes ou as fórmulas, independente do tipo.'
          type:
            - 'excel!Excel.Range#getSpecialCells~1:complex'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
    summary: 'Obtém o objeto RangeAreas, compreendendo um ou mais intervalos, que representa todas as células que correspondem ao tipo e valor especificado. Se nenhuma célula especial for encontrada, um objeto NULL será retornado.'
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCellsOrNullObject(
                    cellType:
                        | SpecialCellType
                        | "ConditionalFormats"
                        | "DataValidations"
                        | "Blanks"
                        | "Constants"
                        | "Formulas"
                        | "SameConditionalFormat"
                        | "SameDataValidation"
                        | "Visible",
                    cellValueType?:
                        | SpecialCellValueType
                        | "All"
                        | "Errors"
                        | "ErrorsLogical"
                        | "ErrorsNumbers"
                        | "ErrorsText"
                        | "ErrorsLogicalNumber"
                        | "ErrorsLogicalText"
                        | "ErrorsNumberText"
                        | "Logical"
                        | "LogicalNumbers"
                        | "LogicalText"
                        | "LogicalNumbersText"
                        | "Numbers"
                        | "NumbersText"
                        | "Text"
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: O tipo de células a serem incluídas.
          type:
            - 'excel!Excel.Range#getSpecialCellsOrNullObject~0:complex'
        - id: cellValueType
          description: 'Se CellType for Constants ou formulas, esse argumento será usado para determinar quais tipos de células incluir no resultado. Esses valores podem ser combinados em conjunto para retornar mais de um tipo. O padrão é selecionar todas as constantes ou as fórmulas, independente do tipo.'
          type:
            - 'excel!Excel.Range#getSpecialCellsOrNullObject~1:complex'
  - uid: 'excel!Excel.Range#getSurroundingRegion:member(1)'
    summary: Retorna um objeto Range que representa a região circundante da célula superior esquerda nesse intervalo. Uma região ao redor é um intervalo limitado por qualquer combinação de linhas e colunas em branco em relação a esse intervalo.
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getTables:member(1)'
    summary: Obtém uma coleção de tabelas com escopo que se sobrepõe ao intervalo.
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): TableScopedCollection;'
      return:
        type:
          - 'excel!Excel.TableScopedCollection:interface'
        description: ''
      parameters:
        - id: fullyContained
          description: 'Se true, retornará somente as tabelas que estão totalmente contidas dentro dos limites do intervalo. O valor padrão é falso.'
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRange:member(1)'
    summary: 'Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.'
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: Considera apenas as células com valores como células usadas.
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
    summary: 'Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.'
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let salesTable = sheet.tables.getItem("SalesTable");
              let dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              let usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  let chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          }
          ```
      parameters:
        - id: valuesOnly
          description: Considera apenas as células com valores como células usadas.
          type:
            - boolean
  - uid: 'excel!Excel.Range#getVisibleView:member(1)'
    summary: Representa as linhas visíveis do intervalo atual.
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): RangeView;'
      return:
        type:
          - 'excel!Excel.RangeView:interface'
        description: ''
  - uid: 'excel!Excel.Range#group:member(1)'
    summary: Agrupa colunas e linhas de uma estrutura de tópicos.
    name: group(groupOption)
    fullName: group(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOption: GroupOption | "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // Group the larger, main level. Note that the outline controls
              // will be on row 10, meaning 4-9 will collapse and expand.
              sheet.getRange("4:9").group(Excel.GroupOption.byRows);

              // Group the smaller, sublevels. Note that the outline controls
              // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
              sheet.getRange("4:5").group(Excel.GroupOption.byRows);
              sheet.getRange("7:8").group(Excel.GroupOption.byRows);
              await context.sync();
          }
          ```
      parameters:
        - id: groupOption
          description: 'Especifica como o intervalo pode ser agrupado por linhas ou colunas. Um `InvalidArgument` erro é acionado quando a opção de grupo difere da `isEntireRow` propriedade ou do intervalo `isEntireColumn` (ou seja, `range.isEntireRow` é true e `groupOption` é "ByColumns" ou `range.isEntireColumn` true e `groupOption` é "ByRows").'
          type:
            - 'excel!Excel.Range#group~0:complex'
  - uid: 'excel!Excel.Range#height:member'
    summary: 'Retorna a distância em pontos, para zoom de 100%, da borda superior do intervalo até a borda inferior do intervalo.'
    name: height
    fullName: height
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly height: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#hidden:member'
    summary: Representa se todas as células do intervalo atual estão ocultas.
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#hideGroupDetails:member(1)'
    summary: Ocultar detalhes do grupo de linhas ou colunas.
    name: hideGroupDetails(groupOption)
    fullName: hideGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        hideGroupDetails(
                    groupOption: GroupOption | "ByRows" | "ByColumns"
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Especifica se é para ocultar detalhes de linhas agrupadas ou colunas agrupadas.
          type:
            - 'excel!Excel.Range#hideGroupDetails~0:complex'
  - uid: 'excel!Excel.Range#hyperlink:member'
    summary: Representa o hiperlink do intervalo atual.
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: RangeHyperlink;'
      return:
        type:
          - 'excel!Excel.RangeHyperlink:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Range#insert:member(1)'
    summary: 'Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.'
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: InsertShiftDirection | "Down" | "Right"): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: shift
          description: Especifica como deslocar as células. Consulte Excel. InsertShiftDirection para obter detalhes.
          type:
            - 'excel!Excel.Range#insert~0:complex'
  - uid: 'excel!Excel.Range#isEntireColumn:member'
    summary: Representa se o intervalo atual está em uma coluna inteira.
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#isEntireRow:member'
    summary: Representa se o intervalo atual está em uma linha inteira.
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#left:member'
    summary: 'Retorna a distância em pontos, para zoom de 100%, da borda esquerda da planilha para a borda esquerda do intervalo.'
    name: left
    fullName: left
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly left: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#linkedDataTypeState:member'
    summary: Representa o estado do tipo de dados de cada célula.
    name: linkedDataTypeState
    fullName: linkedDataTypeState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly linkedDataTypeState: LinkedDataTypeState[][];'
      return:
        type:
          - 'excel!Excel.Range#linkedDataTypeState~0:complex'
  - uid: 'excel!Excel.Range#load:member(1)'
    summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Range#merge:member(1)'
    summary: Mescla as células do intervalo em uma região da planilha.
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: across
          description: Opcional. Defina true para mesclar células em todas as linhas do intervalo especificado como células mescladas separadamente. O valor padrão é false.
          type:
            - boolean
  - uid: 'excel!Excel.Range#moveTo:member(1)'
    summary: 'Move valores de célula, formatação e fórmulas do intervalo atual para o intervalo de destino, substituindo as informações antigas nessas células. O intervalo de destino será expandido automaticamente se for menor do que o intervalo atual. As células no intervalo de destino que estão fora da área do intervalo original não são alteradas.'
    name: moveTo(destinationRange)
    fullName: moveTo(destinationRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: destinationRange especifica o intervalo no qual as informações neste intervalo serão movidas.
          type:
            - 'excel!Excel.Range#moveTo~0:complex'
  - uid: 'excel!Excel.Range#numberFormat:member'
    summary: Representa o código de formato de número do Excel para o intervalo especificado.
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#numberFormatLocal:member'
    summary: 'Representa o código de formato de número do Excel para o intervalo determinado, com base nas configurações de idioma do usuário. O Excel não realiza qualquer coerção de idioma ou formatação ao obter ou definir a `numberFormatLocal` propriedade. Qualquer texto retornado usa as cadeias de caracteres formatadas localmente com base no idioma especificado nas configurações do sistema.'
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#removeDuplicates:member(1)'
    summary: Remove valores duplicados do intervalo especificado pelas colunas.
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        removeDuplicates(
                    columns: number[],
                    includesHeader: boolean
                ): RemoveDuplicatesResult;
      return:
        type:
          - 'excel!Excel.RemoveDuplicatesResult:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:D11");

              let deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          }
          ```
      parameters:
        - id: columns
          description: As colunas dentro do intervalo que podem conter duplicatas. É necessário especificar pelo menos uma coluna. Indexados com zero.
          type:
            - 'number[]'
        - id: includesHeader
          description: True se os dados de entrada contêm cabeçalho. O padrão é false.
          type:
            - boolean
  - uid: 'excel!Excel.Range#replaceAll:member(1)'
    summary: Localiza e substitui a cadeia de caracteres fornecida com base nos critérios especificados no intervalo atual.
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): ClientResult<number>;
      return:
        type:
          - 'excel!Excel.Range#replaceAll~0:complex'
        description: ''
      parameters:
        - id: text
          description: Cadeia de caracteres a ser localizada.
          type:
            - string
        - id: replacement
          description: Cadeia de caracteres para substituir o original por.
          type:
            - string
        - id: criteria
          description: Critérios adicionais de substituição.
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Range#rowCount:member'
    summary: Retorna o número total de linhas no intervalo.
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#rowHidden:member'
    summary: Representa se todas as linhas do intervalo atual estão ocultas.
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#rowIndex:member'
    summary: Representa o número de linhas da primeira célula no intervalo. Indexados com zero.
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#select:member(1)'
    summary: Seleciona o intervalo especificado na interface do usuário do Excel.
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#setDirty:member(1)'
    summary: Define um intervalo a ser recalculado quando o próximo recálculo ocorrer.
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#showCard:member(1)'
    summary: Exibe o cartão para uma célula ativa se ele tiver um conteúdo valioso.
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#showGroupDetails:member(1)'
    summary: Mostrar detalhes do grupo de linhas ou colunas.
    name: showGroupDetails(groupOption)
    fullName: showGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        showGroupDetails(
                    groupOption: GroupOption | "ByRows" | "ByColumns"
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Especifica se é para mostrar detalhes de linhas agrupadas ou colunas agrupadas.
          type:
            - 'excel!Excel.Range#showGroupDetails~0:complex'
  - uid: 'excel!Excel.Range#sort:member'
    summary: Representa a classificação de intervalo do intervalo atual.
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: RangeSort;'
      return:
        type:
          - 'excel!Excel.RangeSort:interface'
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let range = sheet.getRange("A1:E5");

              // Find the column header that provides the sort criteria.
              let header = range.find(criteria, {});
              header.load("columnIndex");
              await context.sync();

              range.sort.apply(
                  [
                      {
                          key: header.columnIndex,
                          sortOn: Excel.SortOn.value
                      }
                  ],
                  false /*matchCase*/,
                  true /*hasHeaders*/,
                  Excel.SortOrientation.rows
              );
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Range#style:member'
    summary: 'Representa o estilo de intervalo atual. Se os estilos das células forem inconsistentes, NULL será retornado. Para estilos personalizados, o nome do estilo será retornado. Para os estilos internos, uma cadeia de caracteres que representa um valor na enumeração BuiltInstyle será retornada.'
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Range#text:member'
    summary: Valores de texto do intervalo especificado. O valor de texto não depende da largura da célula. A \# substituição de sinal que acontece na IU do Excel não afetará o valor de texto retornado pela API.
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: 'excel!Excel.Range#top:member'
    summary: 'Retorna a distância em pontos, para zoom de 100%, da borda superior da planilha até a borda superior do intervalo.'
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly top: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#ungroup:member(1)'
    summary: Desagrupa colunas e linhas de uma estrutura de tópicos.
    name: ungroup(groupOption)
    fullName: ungroup(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOption: GroupOption | "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemplos

          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // This removes two levels of groups from the "A1-R10" range.
              // Any groups at the same level on the same dimension will be removed by a single call.
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              await context.sync();
          }
          ```
      parameters:
        - id: groupOption
          description: Especifica como o intervalo pode ser desagrupado por linhas ou colunas.
          type:
            - 'excel!Excel.Range#ungroup~0:complex'
  - uid: 'excel!Excel.Range#unmerge:member(1)'
    summary: Desfaz a mesclagem das células do intervalo em células separadas.
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#values:member'
    summary: 'Representa os valores brutos do intervalo especificado. Os dados retornados podem ser dos tipos: cadeia de caracteres, número ou booliano. Células que contêm um erro retornarão a cadeia de caracteres de erro.'
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#valueTypes:member'
    summary: Especifica o tipo de dados em cada célula.
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: RangeValueType[][];'
      return:
        type:
          - 'excel!Excel.Range#valueTypes~0:complex'
  - uid: 'excel!Excel.Range#width:member'
    summary: 'Retorna a distância em pontos, para zoom de 100%, da borda esquerda do intervalo até a borda direita do intervalo.'
    name: width
    fullName: width
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly width: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#worksheet:member'
    summary: A planilha que contém o intervalo atual.
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
references:
  - uid: 'excel!Excel.Range#autoFill~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#autoFill~1:complex'
    name: |-
      | AutoFillType
                      | "FillDefault"
                      | "FillCopy"
                      | "FillSeries"
                      | "FillFormats"
                      | "FillValues"
                      | "FillDays"
                      | "FillWeekdays"
                      | "FillMonths"
                      | "FillYears"
                      | "LinearTrend"
                      | "GrowthTrend"
                      | "FlashFill"
    fullName: |-
      | Excel.AutoFillType
                      | "FillDefault"
                      | "FillCopy"
                      | "FillSeries"
                      | "FillFormats"
                      | "FillValues"
                      | "FillDays"
                      | "FillWeekdays"
                      | "FillMonths"
                      | "FillYears"
                      | "LinearTrend"
                      | "GrowthTrend"
                      | "FlashFill"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.AutoFillType:enum'
        name: AutoFillType
        fullName: Excel.AutoFillType
      - name: |2-

                          | "FillDefault"
                          | "FillCopy"
                          | "FillSeries"
                          | "FillFormats"
                          | "FillValues"
                          | "FillDays"
                          | "FillWeekdays"
                          | "FillMonths"
                          | "FillYears"
                          | "LinearTrend"
                          | "GrowthTrend"
                          | "FlashFill"
                  
        fullName: |2-

                          | "FillDefault"
                          | "FillCopy"
                          | "FillSeries"
                          | "FillFormats"
                          | "FillValues"
                          | "FillDays"
                          | "FillWeekdays"
                          | "FillMonths"
                          | "FillYears"
                          | "LinearTrend"
                          | "GrowthTrend"
                          | "FlashFill"
                  
  - uid: 'excel!Excel.Range#clear~0:complex'
    name: |-
      | ClearApplyTo
                      | "All"
                      | "Formats"
                      | "Contents"
                      | "Hyperlinks"
                      | "RemoveHyperlinks"
    fullName: |-
      | Excel.ClearApplyTo
                      | "All"
                      | "Formats"
                      | "Contents"
                      | "Hyperlinks"
                      | "RemoveHyperlinks"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.ClearApplyTo:enum'
        name: ClearApplyTo
        fullName: Excel.ClearApplyTo
      - name: |2-

                          | "All"
                          | "Formats"
                          | "Contents"
                          | "Hyperlinks"
                          | "RemoveHyperlinks"
                  
        fullName: |2-

                          | "All"
                          | "Formats"
                          | "Contents"
                          | "Hyperlinks"
                          | "RemoveHyperlinks"
                  
  - uid: 'excel!Excel.ConditionalFormatCollection:interface'
    name: ConditionalFormatCollection
    fullName: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:interface'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#copyFrom~1:complex'
    name: |-
      | RangeCopyType
                      | "All"
                      | "Formulas"
                      | "Values"
                      | "Formats"
    fullName: |-
      | Excel.RangeCopyType
                      | "All"
                      | "Formulas"
                      | "Values"
                      | "Formats"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.RangeCopyType:enum'
        name: RangeCopyType
        fullName: Excel.RangeCopyType
      - name: |2-

                          | "All"
                          | "Formulas"
                          | "Values"
                          | "Formats"
        fullName: |2-

                          | "All"
                          | "Formulas"
                          | "Values"
                          | "Formats"
  - uid: 'excel!Excel.DataValidation:interface'
    name: DataValidation
    fullName: Excel.DataValidation
  - uid: 'excel!Excel.Range#delete~0:complex'
    name: DeleteShiftDirection | "Up" | "Left"
    fullName: Excel.DeleteShiftDirection | "Up" | "Left"
    spec.typeScript:
      - uid: 'excel!Excel.DeleteShiftDirection:enum'
        name: DeleteShiftDirection
        fullName: Excel.DeleteShiftDirection
      - name: ' | "Up" | "Left"'
        fullName: ' | "Up" | "Left"'
  - uid: 'excel!Excel.Range:interface'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.SearchCriteria:interface'
    name: SearchCriteria
    fullName: Excel.SearchCriteria
  - uid: 'excel!Excel.RangeFormat:interface'
    name: RangeFormat
    fullName: Excel.RangeFormat
  - uid: 'excel!Excel.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getImage~0:complex'
    name: ClientResult<string>
    fullName: Excel.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:interface'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.Range#getIntersection~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.PivotTableScopedCollection:interface'
    name: PivotTableScopedCollection
    fullName: Excel.PivotTableScopedCollection
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.Range#getSpecialCells~0:complex'
    name: |-
      | SpecialCellType
                      | "ConditionalFormats"
                      | "DataValidations"
                      | "Blanks"
                      | "Constants"
                      | "Formulas"
                      | "SameConditionalFormat"
                      | "SameDataValidation"
                      | "Visible"
    fullName: |-
      | Excel.SpecialCellType
                      | "ConditionalFormats"
                      | "DataValidations"
                      | "Blanks"
                      | "Constants"
                      | "Formulas"
                      | "SameConditionalFormat"
                      | "SameDataValidation"
                      | "Visible"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.SpecialCellType:enum'
        name: SpecialCellType
        fullName: Excel.SpecialCellType
      - name: |2-

                          | "ConditionalFormats"
                          | "DataValidations"
                          | "Blanks"
                          | "Constants"
                          | "Formulas"
                          | "SameConditionalFormat"
                          | "SameDataValidation"
                          | "Visible"
        fullName: |2-

                          | "ConditionalFormats"
                          | "DataValidations"
                          | "Blanks"
                          | "Constants"
                          | "Formulas"
                          | "SameConditionalFormat"
                          | "SameDataValidation"
                          | "Visible"
  - uid: 'excel!Excel.Range#getSpecialCells~1:complex'
    name: |-
      | SpecialCellValueType
                      | "All"
                      | "Errors"
                      | "ErrorsLogical"
                      | "ErrorsNumbers"
                      | "ErrorsText"
                      | "ErrorsLogicalNumber"
                      | "ErrorsLogicalText"
                      | "ErrorsNumberText"
                      | "Logical"
                      | "LogicalNumbers"
                      | "LogicalText"
                      | "LogicalNumbersText"
                      | "Numbers"
                      | "NumbersText"
                      | "Text"
    fullName: |-
      | Excel.SpecialCellValueType
                      | "All"
                      | "Errors"
                      | "ErrorsLogical"
                      | "ErrorsNumbers"
                      | "ErrorsText"
                      | "ErrorsLogicalNumber"
                      | "ErrorsLogicalText"
                      | "ErrorsNumberText"
                      | "Logical"
                      | "LogicalNumbers"
                      | "LogicalText"
                      | "LogicalNumbersText"
                      | "Numbers"
                      | "NumbersText"
                      | "Text"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.SpecialCellValueType:enum'
        name: SpecialCellValueType
        fullName: Excel.SpecialCellValueType
      - name: |2-

                          | "All"
                          | "Errors"
                          | "ErrorsLogical"
                          | "ErrorsNumbers"
                          | "ErrorsText"
                          | "ErrorsLogicalNumber"
                          | "ErrorsLogicalText"
                          | "ErrorsNumberText"
                          | "Logical"
                          | "LogicalNumbers"
                          | "LogicalText"
                          | "LogicalNumbersText"
                          | "Numbers"
                          | "NumbersText"
                          | "Text"
                  
        fullName: |2-

                          | "All"
                          | "Errors"
                          | "ErrorsLogical"
                          | "ErrorsNumbers"
                          | "ErrorsText"
                          | "ErrorsLogicalNumber"
                          | "ErrorsLogicalText"
                          | "ErrorsNumberText"
                          | "Logical"
                          | "LogicalNumbers"
                          | "LogicalText"
                          | "LogicalNumbersText"
                          | "Numbers"
                          | "NumbersText"
                          | "Text"
                  
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject~0:complex'
    name: |-
      | SpecialCellType
                      | "ConditionalFormats"
                      | "DataValidations"
                      | "Blanks"
                      | "Constants"
                      | "Formulas"
                      | "SameConditionalFormat"
                      | "SameDataValidation"
                      | "Visible"
    fullName: |-
      | Excel.SpecialCellType
                      | "ConditionalFormats"
                      | "DataValidations"
                      | "Blanks"
                      | "Constants"
                      | "Formulas"
                      | "SameConditionalFormat"
                      | "SameDataValidation"
                      | "Visible"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.SpecialCellType:enum'
        name: SpecialCellType
        fullName: Excel.SpecialCellType
      - name: |2-

                          | "ConditionalFormats"
                          | "DataValidations"
                          | "Blanks"
                          | "Constants"
                          | "Formulas"
                          | "SameConditionalFormat"
                          | "SameDataValidation"
                          | "Visible"
        fullName: |2-

                          | "ConditionalFormats"
                          | "DataValidations"
                          | "Blanks"
                          | "Constants"
                          | "Formulas"
                          | "SameConditionalFormat"
                          | "SameDataValidation"
                          | "Visible"
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject~1:complex'
    name: |-
      | SpecialCellValueType
                      | "All"
                      | "Errors"
                      | "ErrorsLogical"
                      | "ErrorsNumbers"
                      | "ErrorsText"
                      | "ErrorsLogicalNumber"
                      | "ErrorsLogicalText"
                      | "ErrorsNumberText"
                      | "Logical"
                      | "LogicalNumbers"
                      | "LogicalText"
                      | "LogicalNumbersText"
                      | "Numbers"
                      | "NumbersText"
                      | "Text"
    fullName: |-
      | Excel.SpecialCellValueType
                      | "All"
                      | "Errors"
                      | "ErrorsLogical"
                      | "ErrorsNumbers"
                      | "ErrorsText"
                      | "ErrorsLogicalNumber"
                      | "ErrorsLogicalText"
                      | "ErrorsNumberText"
                      | "Logical"
                      | "LogicalNumbers"
                      | "LogicalText"
                      | "LogicalNumbersText"
                      | "Numbers"
                      | "NumbersText"
                      | "Text"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.SpecialCellValueType:enum'
        name: SpecialCellValueType
        fullName: Excel.SpecialCellValueType
      - name: |2-

                          | "All"
                          | "Errors"
                          | "ErrorsLogical"
                          | "ErrorsNumbers"
                          | "ErrorsText"
                          | "ErrorsLogicalNumber"
                          | "ErrorsLogicalText"
                          | "ErrorsNumberText"
                          | "Logical"
                          | "LogicalNumbers"
                          | "LogicalText"
                          | "LogicalNumbersText"
                          | "Numbers"
                          | "NumbersText"
                          | "Text"
                  
        fullName: |2-

                          | "All"
                          | "Errors"
                          | "ErrorsLogical"
                          | "ErrorsNumbers"
                          | "ErrorsText"
                          | "ErrorsLogicalNumber"
                          | "ErrorsLogicalText"
                          | "ErrorsNumberText"
                          | "Logical"
                          | "LogicalNumbers"
                          | "LogicalText"
                          | "LogicalNumbersText"
                          | "Numbers"
                          | "NumbersText"
                          | "Text"
                  
  - uid: 'excel!Excel.TableScopedCollection:interface'
    name: TableScopedCollection
    fullName: Excel.TableScopedCollection
  - uid: 'excel!Excel.RangeView:interface'
    name: RangeView
    fullName: Excel.RangeView
  - uid: 'excel!Excel.Range#group~0:complex'
    name: GroupOption | "ByRows" | "ByColumns"
    fullName: Excel.GroupOption | "ByRows" | "ByColumns"
    spec.typeScript:
      - uid: 'excel!Excel.GroupOption:enum'
        name: GroupOption
        fullName: Excel.GroupOption
      - name: ' | "ByRows" | "ByColumns"'
        fullName: ' | "ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#hideGroupDetails~0:complex'
    name: GroupOption | "ByRows" | "ByColumns"
    fullName: Excel.GroupOption | "ByRows" | "ByColumns"
    spec.typeScript:
      - uid: 'excel!Excel.GroupOption:enum'
        name: GroupOption
        fullName: Excel.GroupOption
      - name: |2-
           | "ByRows" | "ByColumns"
                  
        fullName: |2-
           | "ByRows" | "ByColumns"
                  
  - uid: 'excel!Excel.RangeHyperlink:interface'
    name: RangeHyperlink
    fullName: Excel.RangeHyperlink
  - uid: 'excel!Excel.Range#insert~0:complex'
    name: InsertShiftDirection | "Down" | "Right"
    fullName: Excel.InsertShiftDirection | "Down" | "Right"
    spec.typeScript:
      - uid: 'excel!Excel.InsertShiftDirection:enum'
        name: InsertShiftDirection
        fullName: Excel.InsertShiftDirection
      - name: ' | "Down" | "Right"'
        fullName: ' | "Down" | "Right"'
  - uid: 'excel!Excel.Range#linkedDataTypeState~0:complex'
    name: 'LinkedDataTypeState[][]'
    fullName: 'Excel.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'excel!Excel.LinkedDataTypeState:enum'
        name: LinkedDataTypeState
        fullName: Excel.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Range#moveTo~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RemoveDuplicatesResult:interface'
    name: RemoveDuplicatesResult
    fullName: Excel.RemoveDuplicatesResult
  - uid: 'excel!Excel.Range#replaceAll~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:interface'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: ReplaceCriteria
    fullName: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Range#showGroupDetails~0:complex'
    name: GroupOption | "ByRows" | "ByColumns"
    fullName: Excel.GroupOption | "ByRows" | "ByColumns"
    spec.typeScript:
      - uid: 'excel!Excel.GroupOption:enum'
        name: GroupOption
        fullName: Excel.GroupOption
      - name: |2-
           | "ByRows" | "ByColumns"
                  
        fullName: |2-
           | "ByRows" | "ByColumns"
                  
  - uid: 'excel!Excel.RangeSort:interface'
    name: RangeSort
    fullName: Excel.RangeSort
  - uid: 'excel!Excel.Range#ungroup~0:complex'
    name: GroupOption | "ByRows" | "ByColumns"
    fullName: Excel.GroupOption | "ByRows" | "ByColumns"
    spec.typeScript:
      - uid: 'excel!Excel.GroupOption:enum'
        name: GroupOption
        fullName: Excel.GroupOption
      - name: ' | "ByRows" | "ByColumns"'
        fullName: ' | "ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#valueTypes~0:complex'
    name: 'RangeValueType[][]'
    fullName: 'Excel.RangeValueType[][]'
    spec.typeScript:
      - uid: 'excel!Excel.RangeValueType:enum'
        name: RangeValueType
        fullName: Excel.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Worksheet:interface'
    name: Worksheet
    fullName: Excel.Worksheet