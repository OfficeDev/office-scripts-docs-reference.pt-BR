### YamlMime:TSType
name: Excel.Worksheet
uid: excel!Excel.Worksheet:interface
package: excel!
fullName: Excel.Worksheet
summary: Uma planilha do Excel é uma grade de células. Ele pode conter dados, tabelas, gráficos, etc. Para saber mais sobre o modelo de objeto de planilha, leia [trabalhar com planilhas usando a API JavaScript do Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)<!-- -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: autoFilter
  uid: excel!Excel.Worksheet#autoFilter:member
  package: excel!
  fullName: autoFilter
  summary: Representa o objeto AutoFilter da planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly autoFilter: AutoFilter;'
    return:
      type: <xref uid="excel!Excel.AutoFilter:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let farmData = sheet.getUsedRange();\n\n    // This filter will only show the rows with the top 25% of values in column 3.\n    sheet.autoFilter.apply(farmData, 3, { criterion1: \"25\", filterOn: Excel.FilterOn.topPercent });\n    await context.sync();\n}\n```"
- name: charts
  uid: excel!Excel.Worksheet#charts:member
  package: excel!
  fullName: charts
  summary: Retorna uma coleção de gráficos que fazem parte da planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly charts: ChartCollection;'
    return:
      type: <xref uid="excel!Excel.ChartCollection:interface" />
- name: comments
  uid: excel!Excel.Worksheet#comments:member
  package: excel!
  fullName: comments
  summary: Retorna um conjunto de todos os objetos Comments na planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly comments: CommentCollection;'
    return:
      type: <xref uid="excel!Excel.CommentCollection:interface" />
- name: enableCalculation
  uid: excel!Excel.Worksheet#enableCalculation:member
  package: excel!
  fullName: enableCalculation
  summary: Determina se o Excel deve recalcular a planilha quando necessário. True se o Excel recalcular a planilha quando necessário. False se o Excel não recalcular a planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'enableCalculation: boolean;'
    return:
      type: boolean
- name: freezePanes
  uid: excel!Excel.Worksheet#freezePanes:member
  package: excel!
  fullName: freezePanes
  summary: Obtém um objeto que pode ser usado para manipular painéis congelados na planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly freezePanes: WorksheetFreezePanes;'
    return:
      type: <xref uid="excel!Excel.WorksheetFreezePanes:interface" />
- name: horizontalPageBreaks
  uid: excel!Excel.Worksheet#horizontalPageBreaks:member
  package: excel!
  fullName: horizontalPageBreaks
  summary: Obtém a coleção de quebra de página horizontal da planilha. Esta coleção contém apenas quebras de página manuais.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly horizontalPageBreaks: PageBreakCollection;'
    return:
      type: <xref uid="excel!Excel.PageBreakCollection:interface" />
- name: id
  uid: excel!Excel.Worksheet#id:member
  package: excel!
  fullName: id
  summary: Retorna um valor que identifica de forma exclusiva a planilha em uma determinada pasta de trabalho. O valor do identificador permanece o mesmo, ainda que a planilha seja renomeada ou movida.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: name
  uid: excel!Excel.Worksheet#name:member
  package: excel!
  fullName: name
  summary: O nome de exibição da planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: names
  uid: excel!Excel.Worksheet#names:member
  package: excel!
  fullName: names
  summary: Coleção de nomes com escopo para a planilha atual.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly names: NamedItemCollection;'
    return:
      type: <xref uid="excel!Excel.NamedItemCollection:interface" />
- name: pageLayout
  uid: excel!Excel.Worksheet#pageLayout:member
  package: excel!
  fullName: pageLayout
  summary: Obtém o objeto PageLayout da planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pageLayout: PageLayout;'
    return:
      type: <xref uid="excel!Excel.PageLayout:interface" />
- name: pivotTables
  uid: excel!Excel.Worksheet#pivotTables:member
  package: excel!
  fullName: pivotTables
  summary: Coleção de Tabelas Dinâmicas que fazem parte da planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pivotTables: PivotTableCollection;'
    return:
      type: <xref uid="excel!Excel.PivotTableCollection:interface" />
- name: position
  uid: excel!Excel.Worksheet#position:member
  package: excel!
  fullName: position
  summary: A posição baseada em zero da planilha na pasta de trabalho.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'position: number;'
    return:
      type: number
- name: protection
  uid: excel!Excel.Worksheet#protection:member
  package: excel!
  fullName: protection
  summary: Retorna o objeto de proteção da planilha para uma planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly protection: WorksheetProtection;'
    return:
      type: <xref uid="excel!Excel.WorksheetProtection:interface" />
- name: shapes
  uid: excel!Excel.Worksheet#shapes:member
  package: excel!
  fullName: shapes
  summary: Retorna a coleção de todos os objetos Shape na planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly shapes: ShapeCollection;'
    return:
      type: <xref uid="excel!Excel.ShapeCollection:interface" />
- name: showGridlines
  uid: excel!Excel.Worksheet#showGridlines:member
  package: excel!
  fullName: showGridlines
  summary: Especifica se as linhas de grade são visíveis para o usuário.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGridlines: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.showGridlines = true;\n\n    await context.sync();\n}\n```"
- name: showHeadings
  uid: excel!Excel.Worksheet#showHeadings:member
  package: excel!
  fullName: showHeadings
  summary: Especifica se os títulos são visíveis para o usuário.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showHeadings: boolean;'
    return:
      type: boolean
- name: slicers
  uid: excel!Excel.Worksheet#slicers:member
  package: excel!
  fullName: slicers
  summary: Retorna uma coleção de slicers que fazem parte da planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly slicers: SlicerCollection;'
    return:
      type: <xref uid="excel!Excel.SlicerCollection:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Pivot\");\n    let slicer = sheet.slicers.add(\n        \"Farm Sales\", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */\n        \"Type\" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */\n    );\n    slicer.name = \"Fruit Slicer\";\n    await context.sync();\n}\n```"
- name: standardHeight
  uid: excel!Excel.Worksheet#standardHeight:member
  package: excel!
  fullName: standardHeight
  summary: Retorna a altura padrão de todas as linhas na planilha, em pontos.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly standardHeight: number;'
    return:
      type: number
- name: standardWidth
  uid: excel!Excel.Worksheet#standardWidth:member
  package: excel!
  fullName: standardWidth
  summary: Especifica a largura padrão de todas as colunas da planilha. Uma unidade de largura de coluna equivale à largura de um caractere no estilo Normal. Para fontes proporcionais, será usada a largura do caractere 0 (zero).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'standardWidth: number;'
    return:
      type: number
- name: tabColor
  uid: excel!Excel.Worksheet#tabColor:member
  package: excel!
  fullName: tabColor
  summary: A cor da guia da planilha. Ao recuperar a cor de tabulação, se a planilha estiver invisível, o valor será NULL. Se a planilha estiver visível, mas a cor da guia estiver definida como auto, uma cadeia de caracteres vazia será retornada. Caso contrário, a propriedade será definida como uma cor, no formato " \# 123456" ao definir a cor, usar uma cadeia de caracteres vazia para definir uma cor "auto" ou uma cor real caso contrário.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'tabColor: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.tabColor = \"#FF0000\";\n\n    await context.sync();\n}\n```"
- name: tables
  uid: excel!Excel.Worksheet#tables:member
  package: excel!
  fullName: tables
  summary: Coleção de tabelas que fazem parte da planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly tables: TableCollection;'
    return:
      type: <xref uid="excel!Excel.TableCollection:interface" />
- name: verticalPageBreaks
  uid: excel!Excel.Worksheet#verticalPageBreaks:member
  package: excel!
  fullName: verticalPageBreaks
  summary: Obtém a coleção de quebra de página vertical da planilha. Esta coleção contém apenas quebras de página manuais.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly verticalPageBreaks: PageBreakCollection;'
    return:
      type: <xref uid="excel!Excel.PageBreakCollection:interface" />
- name: visibility
  uid: excel!Excel.Worksheet#visibility:member
  package: excel!
  fullName: visibility
  summary: A visibilidade da planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'visibility: SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type: <xref uid="excel!Excel.SheetVisibility:enum" /> | "Visible" | "Hidden" | "VeryHidden"
methods:
- name: activate()
  uid: excel!Excel.Worksheet#activate:member(1)
  package: excel!
  fullName: activate()
  summary: Ative a planilha na interface do usuário do Excel.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'activate(): void;'
    return:
      type: void
      description: ''
- name: calculate(markAllDirty)
  uid: excel!Excel.Worksheet#calculate:member(1)
  package: excel!
  fullName: calculate(markAllDirty)
  summary: Calcula todas as células em uma planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(markAllDirty: boolean): void;'
    parameters:
    - id: markAllDirty
      description: True, para marcar tudo como sujo.
      type: boolean
    return:
      type: void
      description: ''
- name: copy(positionType, relativeTo)
  uid: excel!Excel.Worksheet#copy:member(1)
  package: excel!
  fullName: copy(positionType, relativeTo)
  summary: Copia uma planilha e a coloca na posição especificada.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      copy(
                  positionType?:
                      | WorksheetPositionType
                      | "None"
                      | "Before"
                      | "After"
                      | "Beginning"
                      | "End",
                  relativeTo?: Worksheet
              ): Worksheet;
    parameters:
    - id: positionType
      description: O local na pasta de trabalho para colocar a planilha recém-criada. O valor padrão é "nenhum", que insere a planilha no início da planilha.
      type: >-
        | <xref uid="excel!Excel.WorksheetPositionType:enum" />
                        | "None"
                        | "Before"
                        | "After"
                        | "Beginning"
                        | "End"
    - id: relativeTo
      description: A planilha existente que determina a posição da planilha recém-criada. Isso só será necessário se `positionType` for "antes" ou "depois".
      type: <xref uid="excel!Excel.Worksheet:interface" />
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let myWorkbook = context.workbook;\n    let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();\n    let copiedSheet = sampleSheet.copy(\"End\")\n\n    sampleSheet.load(\"name\");\n    copiedSheet.load(\"name\");\n\n    await context.sync();\n\n    console.log(\"'\" + sampleSheet.name + \"' was copied to '\" + copiedSheet.name + \"'\")\n}\n```"
- name: delete()
  uid: excel!Excel.Worksheet#delete:member(1)
  package: excel!
  fullName: delete()
  summary: Exclui a planilha da pasta de trabalho. Observe que, se a visibilidade da planilha estiver definida como "VeryHidden", a operação de exclusão falhará com uma `InvalidOperation` exceção. Você deve primeiro alterar sua visibilidade para oculto ou visível antes de excluí-lo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: ''
- name: findAll(text, criteria)
  uid: excel!Excel.Worksheet#findAll:member(1)
  package: excel!
  fullName: findAll(text, criteria)
  summary: Encontra todas as ocorrências de determinada cadeia de caracteres com base nos critérios especificados e as retorna como um objeto RangeAreas, compreendendo um ou mais intervalos retangulares.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'findAll(text: string, criteria: WorksheetSearchCriteria): RangeAreas;'
    parameters:
    - id: text
      description: A cadeia de caracteres a ser localizada.
      type: string
    - id: criteria
      description: Critérios de pesquisa adicionais, incluindo se a pesquisa precisa corresponder à célula inteira ou diferenciar maiúsculas de minúsculas.
      type: <xref uid="excel!Excel.WorksheetSearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: ''
- name: findAllOrNullObject(text, criteria)
  uid: excel!Excel.Worksheet#findAllOrNullObject:member(1)
  package: excel!
  fullName: findAllOrNullObject(text, criteria)
  summary: Encontra todas as ocorrências de determinada cadeia de caracteres com base nos critérios especificados e as retorna como um objeto RangeAreas, compreendendo um ou mais intervalos retangulares.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      findAllOrNullObject(
                  text: string,
                  criteria: WorksheetSearchCriteria
              ): RangeAreas;
    parameters:
    - id: text
      description: A cadeia de caracteres a ser localizada.
      type: string
    - id: criteria
      description: Critérios de pesquisa adicionais, incluindo se a pesquisa precisa corresponder à célula inteira ou diferenciar maiúsculas de minúsculas.
      type: <xref uid="excel!Excel.WorksheetSearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let foundRanges = sheet.findAllOrNullObject(\"Complete\", {\n        completeMatch: true,\n        matchCase: false\n    });\n\n    await context.sync();\n\n    if (foundRanges.isNullObject) {\n        console.log(\"No complete projects\");\n    } else {\n        foundRanges.format.fill.color = \"green\"\n    }\n}\n```"
- name: getCell(row, column)
  uid: excel!Excel.Worksheet#getCell:member(1)
  package: excel!
  fullName: getCell(row, column)
  summary: Obtém o objeto de intervalo que contém a célula única com base nos números de linha e de coluna. A célula pode estar fora dos limites de seu intervalo pai, desde que ela permaneça dentro da grade da planilha.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Range;'
    parameters:
    - id: row
      description: O número da linha da célula a ser recuperada. Indexados com zero.
      type: number
    - id: column
      description: O número da coluna da célula a ser recuperada. Indexado com zero.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getNext(visibleOnly)
  uid: excel!Excel.Worksheet#getNext:member(1)
  package: excel!
  fullName: getNext(visibleOnly)
  summary: Obtém a planilha que segue esta. Se não houver planilhas após esta, este método gerará um erro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNext(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Opcional. Se true, só considera planilhas visíveis, ignorando as ocultas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getNextOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getNextOrNullObject:member(1)
  package: excel!
  fullName: getNextOrNullObject(visibleOnly)
  summary: Obtém a planilha que segue esta. Se não houver planilhas após esta, este método retornará um objeto NULL.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Opcional. Se true, só considera planilhas visíveis, ignorando as ocultas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getPrevious(visibleOnly)
  uid: excel!Excel.Worksheet#getPrevious:member(1)
  package: excel!
  fullName: getPrevious(visibleOnly)
  summary: Obtém a planilha que precede esta. Se não houver planilhas anteriores, este método gerará um erro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Opcional. Se true, só considera planilhas visíveis, ignorando as ocultas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getPreviousOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getPreviousOrNullObject:member(1)
  package: excel!
  fullName: getPreviousOrNullObject(visibleOnly)
  summary: Obtém a planilha que precede esta. Se não houver planilhas anteriores, este método retornará um objeto NULL.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Opcional. Se true, só considera planilhas visíveis, ignorando as ocultas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getRange(address)
  uid: excel!Excel.Worksheet#getRange:member(1)
  package: excel!
  fullName: getRange(address)
  summary: Obtém o objeto Range, representando um único bloco retangular de células, especificado pelo endereço ou nome.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(address?: string): Range;'
    parameters:
    - id: address
      description: 'Opcional. A cadeia de caracteres que representa o endereço ou o nome do intervalo. Por exemplo, "a1: B2". Caso não seja especificado, todo o intervalo da planilha será retornado.'
      type: string
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  uid: excel!Excel.Worksheet#getRangeByIndexes:member(1)
  package: excel!
  fullName: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  summary: Obtém o objeto Range que começa em um determinado índice de linha e índice de coluna e que abrange um determinado número de linhas e colunas.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getRangeByIndexes(
                  startRow: number,
                  startColumn: number,
                  rowCount: number,
                  columnCount: number
              ): Range;
    parameters:
    - id: startRow
      description: Linha inicial (indexada por zero).
      type: number
    - id: startColumn
      description: Coluna inicial (indexada por zero).
      type: number
    - id: rowCount
      description: Número de linhas a serem incluídas no intervalo.
      type: number
    - id: columnCount
      description: Número de colunas a serem incluídas no intervalo.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getRanges(address)
  uid: excel!Excel.Worksheet#getRanges:member(1)
  package: excel!
  fullName: getRanges(address)
  summary: Obtém o objeto RangeAreas que representa um ou mais blocos de intervalos retangulares especificados pelo endereço ou nome.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRanges(address?: string): RangeAreas;'
    parameters:
    - id: address
      description: 'Opcional. Uma cadeia de caracteres que contém os endereços ou nomes separados por vírgulas de intervalos individuais. Por exemplo, "a1: B2, A5: B5". Se não for especificado, será retornado um objeto RangeArea para a planilha inteira.'
      type: string
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let specifiedRanges = sheet.getRanges(\"D3:D5, G3:G5\");\n    specifiedRanges.format.fill.color = \"pink\";\n\n    await context.sync();\n})\n```"
- name: getUsedRange(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRange:member(1)
  package: excel!
  fullName: getUsedRange(valuesOnly)
  summary: O intervalo usado é o menor intervalo que abrange todas as células que têm um valor ou uma formatação atribuída a elas. Se a planilha inteira estiver em branco, essa função retornará a célula superior esquerda (ou seja, *não* gerará um erro).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Range;'
    parameters:
    - id: valuesOnly
      description: Opcional. Se true, considera apenas as células com valores como células usadas (ignorando a formatação).
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getUsedRangeOrNullObject(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)
  package: excel!
  fullName: getUsedRangeOrNullObject(valuesOnly)
  summary: O intervalo usado é o menor intervalo que abrange todas as células que têm um valor ou uma formatação atribuída a elas. Se a planilha inteira estiver em branco, esta função retornará um objeto null.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Range;'
    parameters:
    - id: valuesOnly
      description: Opcional. Considera apenas as células com valores como células usadas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Worksheet#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
      type: string | string[]
    return:
      type: void
      description: ''
- name: replaceAll(text, replacement, criteria)
  uid: excel!Excel.Worksheet#replaceAll:member(1)
  package: excel!
  fullName: replaceAll(text, replacement, criteria)
  summary: Localiza e substitui a cadeia de caracteres fornecida com base nos critérios especificados na planilha atual.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      replaceAll(
                  text: string,
                  replacement: string,
                  criteria: ReplaceCriteria
              ): ClientResult<number>;
    parameters:
    - id: text
      description: Cadeia de caracteres a ser localizada.
      type: string
    - id: replacement
      description: Cadeia de caracteres para substituir o original por.
      type: string
    - id: criteria
      description: Critérios adicionais de substituição.
      type: <xref uid="excel!Excel.ReplaceCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;
      description: ''
- name: showOutlineLevels(rowLevels, columnLevels)
  uid: excel!Excel.Worksheet#showOutlineLevels:member(1)
  package: excel!
  fullName: showOutlineLevels(rowLevels, columnLevels)
  summary: Mostra grupos de linhas ou colunas por seus níveis de estrutura de tópicos. Descreve o grupo e resume uma lista de dados na planilha. Os `rowLevels` `columnLevels` parâmetros e especificam quantos níveis do contorno serão exibidos. O intervalo de argumentos aceitável está entre 0 e 8. O valor 0 não altera a exibição atual. Um valor maior do que o número atual de níveis exibe todos os níveis.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
    parameters:
    - id: rowLevels
      description: O número de níveis de linha de uma estrutura de tópicos a ser exibido.
      type: number
    - id: columnLevels
      description: O número de níveis de coluna de uma estrutura de tópicos a ser exibido.
      type: number
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nExcel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // This collapses the entire outline.\n    sheet.showOutlineLevels(1, 1);\n    await context.sync();\n}\n```\n```typescript\nExcel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // This shows the top 3 outline levels; collapsing any additional sublevels.\n    sheet.showOutlineLevels(3, 3);\n    await context.sync();\n}\n```"
metadata:
  ms.openlocfilehash: 3827291e11b2d99290067ce2143a928083276d38
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49412640"
