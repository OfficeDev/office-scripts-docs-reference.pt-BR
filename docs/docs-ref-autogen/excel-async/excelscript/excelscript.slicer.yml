### YamlMime:TSType
name: Excel.Slicer
uid: excel!Excel.Slicer:interface
package: excel!
fullName: Excel.Slicer
summary: Representa um objeto slicer na pasta de trabalho.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: caption
  uid: excel!Excel.Slicer#caption:member
  package: excel!
  fullName: caption
  summary: Representa a legenda da segmentação de dados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'caption: string;'
    return:
      type: string
- name: height
  uid: excel!Excel.Slicer#height:member
  package: excel!
  fullName: height
  summary: Representa a altura, em pontos, da segmentação de dados. Gera um "o argumento é inválido ou está ausente ou tem um formato incorreto." exceção quando definida com valor negativo ou zero como entrada.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'height: number;'
    return:
      type: number
- name: id
  uid: excel!Excel.Slicer#id:member
  package: excel!
  fullName: id
  summary: Representa a id exclusiva da segmentação de dados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: isFilterCleared
  uid: excel!Excel.Slicer#isFilterCleared:member
  package: excel!
  fullName: isFilterCleared
  summary: Verdadeiro se todos os filtros atualmente aplicados na segmentação de dados estiverem desmarcados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly isFilterCleared: boolean;'
    return:
      type: boolean
- name: left
  uid: excel!Excel.Slicer#left:member
  package: excel!
  fullName: left
  summary: Representa a distância, em pontos, da lateral esquerda da segmentação de dados à esquerda da planilha. Gera um "o argumento é inválido ou está ausente ou tem um formato incorreto." exceção quando definida com valor negativo como entrada.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'left: number;'
    return:
      type: number
- name: name
  uid: excel!Excel.Slicer#name:member
  package: excel!
  fullName: name
  summary: Representa o nome da segmentação de dados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: slicerItems
  uid: excel!Excel.Slicer#slicerItems:member
  package: excel!
  fullName: slicerItems
  summary: Representa a coleção de SlicerItems que faz parte da segmentação de dados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly slicerItems: SlicerItemCollection;'
    return:
      type: <xref uid="excel!Excel.SlicerItemCollection:interface" />
- name: sortBy
  uid: excel!Excel.Slicer#sortBy:member
  package: excel!
  fullName: sortBy
  summary: 'Representa a ordem de classificação dos itens na segmentação de dados. Os valores possíveis são: "DataSourceOrder", "crescente", "decrescente".'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'sortBy: SlicerSortType | "DataSourceOrder" | "Ascending" | "Descending";'
    return:
      type: <xref uid="excel!Excel.SlicerSortType:enum" /> | "DataSourceOrder" | "Ascending" | "Descending"
- name: style
  uid: excel!Excel.Slicer#style:member
  package: excel!
  fullName: style
  summary: 'Valor da constante que representa o estilo da Segmentação de dados. Os valores possíveis são: "SlicerStyleLight1" por meio de "SlicerStyleLight6", "TableStyleOther1" até "TableStyleOther2", "SlicerStyleDark1" até "SlicerStyleDark6". Também é possível usar um estilo definido pelo usuário que esteja presente na planilha.'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'style: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let slicer = context.workbook.slicers.getItem(\"Fruit Slicer\");\n    slicer.style = \"SlicerStyleLight6\";\n    await context.sync();\n}\n```"
- name: top
  uid: excel!Excel.Slicer#top:member
  package: excel!
  fullName: top
  summary: Representa a distância, em pontos, da borda superior da segmentação de dados na parte superior da planilha. Gera um "o argumento é inválido ou está ausente ou tem um formato incorreto." exceção quando definida com valor negativo como entrada.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'top: number;'
    return:
      type: number
- name: width
  uid: excel!Excel.Slicer#width:member
  package: excel!
  fullName: width
  summary: Representa a largura, em pontos, da segmentação de dados. Gera um "o argumento é inválido ou está ausente ou tem um formato incorreto." exceção quando definida com valor negativo ou zero como entrada.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'width: number;'
    return:
      type: number
- name: worksheet
  uid: excel!Excel.Slicer#worksheet:member
  package: excel!
  fullName: worksheet
  summary: Representa a planilha que contém a segmentação de dados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
methods:
- name: clearFilters()
  uid: excel!Excel.Slicer#clearFilters:member(1)
  package: excel!
  fullName: clearFilters()
  summary: Limpa todos os filtros aplicados à segmentação de dados no momento.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearFilters(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let slicer = context.workbook.slicers.getItem(\"Fruit Slicer\");\n    slicer.clearFilters();\n    await context.sync();\n}\n```"
- name: delete()
  uid: excel!Excel.Slicer#delete:member(1)
  package: excel!
  fullName: delete()
  summary: Exclui a segmentação de dados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.slicers.getItemAt(0).delete();\n    await context.sync();\n}\n```"
- name: getSelectedItems()
  uid: excel!Excel.Slicer#getSelectedItems:member(1)
  package: excel!
  fullName: getSelectedItems()
  summary: Retorna uma matriz de chaves de itens selecionados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedItems(): ClientResult<string[]>;'
    return:
      type: <xref uid="excel!Excel.ClientResult:interface" />&lt;string[]&gt;
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Slicer#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Coloca um comando na fila para carregar as propriedades especificadas do objeto. Você deve chamar `context.sync()` antes de ler as propriedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades a serem carregadas.
      type: string | string[]
    return:
      type: void
      description: ''
- name: selectItems(items)
  uid: excel!Excel.Slicer#selectItems:member(1)
  package: excel!
  fullName: selectItems(items)
  summary: Seleciona itens de segmentação de itens com base em suas chaves. As seleções anteriores estão desmarcadas. Todos os itens serão selecionados por padrão se a matriz estiver vazia.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'selectItems(items?: string[]): void;'
    parameters:
    - id: items
      description: Opcional. Os nomes de item de segmentação de itens especificados a serem selecionados.
      type: string[]
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let slicer = context.workbook.slicers.getItem(\"Fruit Slicer\");\n    slicer.selectItems([\"Lemon\", \"Lime\", \"Orange\"]);\n    await context.sync();\n}\n```"
metadata:
  ms.openlocfilehash: 40b0e71f29db5f4c18ea35ab8b63508e16a64199
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49418408"
